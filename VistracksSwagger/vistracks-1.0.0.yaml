openapi: 3.0.1
info:
  title: Vistracks API
  description: This is the Vistracks api.
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/hos30/Vistracks/1.0.0
- url: http://virtserver.swaggerhub.com/hos30/Vistracks/1.0.0
paths:
  /api/v2/accountOnBoarding:
    post:
      tags:
        - accountOnBoarding
      summary: Onboard one or more new accounts.
      operationId: onBoardAccounts
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: Create one or more accounts.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AccountOnBoarding'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/hos3AccountOnBoarding:
    post:
      tags:
        - hos3AccountOnBoarding
      summary: Additional hos3 onboarding of an existing account
      operationId: hos3OnBoardAccountsCreate
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: Updating an existing account with hos3 meta data
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Hos3AccountOnBoarding'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3AccountOnBoarding'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    put:
      tags:
        - hos3AccountOnBoarding
      summary: Additional hos3 onboarding of an existing account
      operationId: hos3OnBoardAccountsUpdate
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: Updating an existing account with hos3 meta data
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Hos3AccountOnBoarding'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3AccountOnBoarding'
      security:
        - BasicAuth: [ ]
        - OAuth2: [ ]
      x-codegen-request-body-name: body
  /api/v2/hos3DriverOnBoarding:
    post:
      tags:
        - hos3DriverOnBoarding
      summary: Additional hos3 onboarding of a driver
      operationId: hos3OnBoardDriversCreate
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: Updating an existing driver with hos3 meta data
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Hos3DriverOnBoarding'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3DriverOnBoarding'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    put:
      tags:
        - hos3DriverOnBoarding
      summary: Additional hos3 onboarding of a driver
      operationId: hos3OnBoardDriversUpdate
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: Updating an existing driver with hos3 meta data
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Hos3DriverOnBoarding'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3DriverOnBoarding'
      security:
        - BasicAuth: [ ]
        - OAuth2: [ ]
      x-codegen-request-body-name: body
  /api/v2/hos3OperationalUnit:
    get:
      tags:
        - hos3OperationalUnit
      summary: Get matching hos3 operational units.
      operationId: getHos3OperationalUnit
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/uuidParam"
        - $ref: "#/components/parameters/parentUuidParam"
        - $ref: "#/components/parameters/businessAccountUuidParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: |
            Sort order:
              * `created-date` – Sort records by their created date field in ascending order (DEFAULT)
              * `-created-date` – Sort records by their created date field in descending order
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3OperationalUnit'
      security:
        - BasicAuth: []
        - OAuth2: []
    put:
      tags:
        - hos3OperationalUnit
      summary: Update a hos3 operational unit record
      operationId: updateHos3OperationalUnit
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The hos3 operational unit record to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Hos3OperationalUnit'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3OperationalUnit'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
        - hos3OperationalUnit
      summary: Creates a new hos3 operational unit.
      operationId: createHos3OperationalUnit
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The hos3 operational unit record to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Hos3OperationalUnit'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3OperationalUnit'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/hos3OperationalUnitDriver:
    get:
      tags:
        - hos3OperationalUnitDriver
      summary: Get matching hos3 operational unit drivers.
      operationId: getHos3OperationalUnitDriver
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/operationalUnitUuidParam"
        - $ref: "#/components/parameters/driverUuidParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: |
            Sort order:
              * `created-date` – Sort records by their created date field in ascending order (DEFAULT)
              * `-created-date` – Sort records by their created date field in descending order
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3OperationalUnitDriver'
      security:
        - BasicAuth: []
        - OAuth2: []
    put:
      tags:
        - hos3OperationalUnitDriver
      summary: Update a hos3 operational unit driver record
      operationId: updateHos3OperationalUnitDriver
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The hos3 operational unit record driver to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Hos3OperationalUnitDriver'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3OperationalUnitDriver'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
        - hos3OperationalUnitDriver
      summary: Creates a new hos3 operational unit driver.
      operationId: createHos3OperationalUnitDriver
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The hos3 operational unit driver record to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Hos3OperationalUnitDriver'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3OperationalUnitDriver'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/hos3OperationalUnitTree:
    get:
      tags:
        - hos3OperationalUnitTree
      summary: Get tree structure for all hos3 operational units under business account.
      operationId: getHos3OperationalUnitTree
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hos3OperationalUnitTree'
      security:
        - BasicAuth: []
        - OAuth2: []
  /api/v2/accountProperties/{recordIds}:
    get:
      tags:
      - accountProperties
      summary: Get one or more account properties by name or record ids. If no name
        or ids are specified all properties will be returned (subject to any paging
        limits). System properties will only be returned if the user has the appropriate
        permissions. If a single name is specified, all other filter criteria are
        ignored.
      operationId: getAccountProperties
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/nameArrayParam"
      - $ref: "#/components/parameters/fromChangeTimestampParam"
      - $ref: "#/components/parameters/toChangeTimestampParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - in: query
        name: sort
        required: false
        description: >
          Sort: order
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `name` – Sort records by their name field in ascending order
            * `-name` – Sort records by their name field in descending order
            * `last-changed-date` – Sort records by their last change date field in ascending order
            * `-last-changed-date` – Sort records by their last change date field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountProperty'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/accountProperties:
    put:
      tags:
      - accountProperties
      summary: Update one or more account properties.
      operationId: updateAccountProperties
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: One or more account properties to update (name/value). All properties
          other than id/name/value will be ignored.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AccountProperty'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountProperty'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
      - accountProperties
      summary: Create one or more account properties.
      operationId: createAccountProperties
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: One or more account properties to create (name/value). All properties
          other than name/value will be ignored.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AccountProperty'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountProperty'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/alertNotification:
    post:
      tags:
      - alertNotification
      summary: Create an alert notification.
      description: This API provides the ability to send email and SMS Alert Notification
        to predefined distribution lists that can be set on Account Properties with
        names “hos.alert.emails” and hos.alert.phonenumbers”, respectively.
      operationId: createAlertNotification
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The alert notification to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertNotification'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
                additionalProperties:
                  type: string
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/assets/{recordIds}:
    get:
      tags:
        - asset
      summary: Assets refers to the collection of Vehicles and Trailers owned by an Account.
        An Asset is paired with a given ELD device capable of periodically reporting back its position and possibly
        other characteristics of the vehicle.
        Assets can be associated with Driver Histories, Asset Statuses, etc. containing information that the
        device and the HOS application has reported back to the Hours of Service servers.
      operationId: getAsset
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdsParam"
        - $ref: "#/components/parameters/activeParam"
        - $ref: "#/components/parameters/nameParam"
        - $ref: "#/components/parameters/assetTypeParam"
        - $ref: "#/components/parameters/vinParam"
        - $ref: "#/components/parameters/licensePlateParam"
        - $ref: "#/components/parameters/visibilitySetIdArrayParam"
        - $ref: "#/components/parameters/fromChangeTimestampParam"
        - $ref: "#/components/parameters/toChangeTimestampParam"
        - $ref: "#/components/parameters/fromDeletedAtParam"
        - $ref: "#/components/parameters/uuidParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: |
            Sort: order
              * `id` – Sort records by their id field in ascending order (DEFAULT)
              * `-id` – Sort records by their id field in descending order
              * `name` – Sort records by their name field in ascending order
              * `-name` – Sort records by their name field in descending order
              * `external-id` – Sort records by their externalId field in ascending order
              * `-external-id` – Sort records by their externalId field in descending order
              * `asset-type` – Sort records by their assetType in ascending order
              * `-asset-type` – Sort records by their assetType field in descending order
              * `last-changed-date` – Sort records by their last change date field in ascending order
              * `-last-changed-date` – Sort records by their last change date field in descending order
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
      security:
        - BasicAuth: []
        - OAuth2: []
    delete:
      tags:
        - asset
      summary: Deletes an asset record.
      description: Supports soft delete. Requires the PERM_EDIT_EQUIPMENT permission for users and drivers.
        Drivers must also be allowed to delete equipment, based on the “hos.driver.equipment.delete” account property
        and their “HOS_DELETE_EQUIPMENT” user preference, both must be set to true
      operationId: deleteAsset
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdParam"
        - $ref: "#/components/parameters/uuidParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
      security:
        - BasicAuth: []
        - OAuth2: []
  /api/v2/assets:
    put:
      tags:
        - asset
      summary: Update an asset record
      operationId: updateAsset
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The asset record to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Asset'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
        - asset
      summary: Creates a new asset.
      operationId: createAsset
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The asset record to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Asset'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/assetStatuses:
    get:
      tags:
      - assetStatus
      summary: The Asset Status is a read-only API that provides near real-time information
        from the most recent communication between the mobile devices of the Drivers
        and Hours of Service servers for the status of an Asset. It is used to update
        the position of the Asset (and the Driver using it) on a map that can be seen
        in the Portal’s Locations tab.
      operationId: getAssetStatus
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/userIdParam"
      - $ref: "#/components/parameters/assetIdParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/driverAliasArrayParam"
      - in: query
        name: sort
        description: >
          Sort: order
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetStatus'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/driverStatuses/{recordIds}:
    get:
      tags:
      - driverStatus
      summary: The driverStatus provides real-time information from the most recent
        communication between the Drivers’ mobile device and Hours of Service system.
        This information is typically sent once per three minutes but can be sent
        more or less frequently as determined by the Carrier.  It is used to update
        the Driver’s position on a map, to show his current duty Status (OnDutyND,
        Driving, Sleeper, OffDuty), to pass the Driver’s available time (time remaining)
        until he has to take a break, in his shift, his daily driving time, and time
        left in his cycle. This information is then displayed on the portal in the
        Driver’s tab.
      operationId: getDriverStatus
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/userIdArrayParam"
      - $ref: "#/components/parameters/assetIdArrayParam"
      - $ref: "#/components/parameters/terminalIdArrayParam"
      - $ref: "#/components/parameters/activeParam"
      - $ref: "#/components/parameters/systemParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/driverAliasArrayParam"
      - name: sort
        in: query
        description: |
          Sort: order
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `user-id` – Sort records by their userId field in ascending order
            * `-user-id` – Sort records by their userId field in descending order
            * `asset-id` – Sort records by their assetId field in ascending order
            * `-asset-id` – Sort records by their assetId field in descending order
            * `asset-name` – Sort records by asset name in ascending order
            * `-asset-name` – Sort records by asset name in descending order
            * `event-time` – Sort records by their eventTime field in ascending order
            * `-event-time` – Sort records by their eventTime field in descending order
            * `event-type` – Sort records by their eventType field in ascending order
            * `-event-type` – Sort records by their eventType field in descending order
            * `available-cycle` – Sort records by their availableCycle field in ascending order
            * `-available-cycle` – Sort records by their availableCycle field in descending order
            * `available-shift` – Sort records by their availableShift field in ascending order
            * `available-shift` – Sort records by their availableShift field in descending order
            * `available-drive` – Sort records by their availableDrive field in ascending order
            * `-available-drive` – Sort records by their availableDrive field in descending order
            * `software-version` – Sort records by their softwareVersion field in ascending order
            * `-software-version` – Sort records by their softwareVersion field in descending order
            * `next-violation-timestamp` – Sort records by their nextViolationTimestamp field in ascending order
            * `-next-violation-timestamp` – Sort records by their nextViolationTimestamp field in descending order
            * `uncertified-logs` – Sort records by their uncertifiedLogs field in ascending order
            * `-uncertified-logs` – Sort records by their uncertifiedLogs field in descending order
            * `last-changed-date` – Sort records by their last change date field in ascending order
            * `-last-changed-date` – Sort records by their last change date field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverStatus'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/driverStatuses:
    put:
      tags:
      - driverStatus
      summary: Update a driver status record
      operationId: updateDriverStatus
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The driver status record to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverStatus'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverStatus'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
      - driverStatus
      summary: Create a driver status record
      operationId: createDriverStatus
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The driver status record to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverStatus'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverStatus'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/driverStatuses/archive/{recordIds}:
    get:
      tags:
      - driverStatus
      summary: Get driver status archives
      operationId: getDriverStatusArchives
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/userIdArrayParam"
      - $ref: "#/components/parameters/assetIdArrayParam"
      - $ref: "#/components/parameters/terminalIdArrayParam"
      - $ref: "#/components/parameters/activeParam"
      - $ref: "#/components/parameters/systemParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/fromEventTimeParam"
      - $ref: "#/components/parameters/toEventTimeParam"
      - name: sort
        in: query
        description: |
          Sort: order
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `user-id` – Sort records by their userId field in ascending order
            * `-user-id` – Sort records by their userId field in descending order
            * `asset-id` – Sort records by their assetId field in ascending order
            * `-asset-id` – Sort records by their assetId field in descending order
            * `asset-name` – Sort records by asset name in ascending order
            * `-asset-name` – Sort records by asset name in descending order
            * `event-time` – Sort records by their eventTime field in ascending order
            * `-event-time` – Sort records by their eventTime field in descending order
            * `event-type` – Sort records by their eventType field in ascending order
            * `-event-type` – Sort records by their eventType field in descending order
            * `available-cycle` – Sort records by their availableCycle field in ascending order
            * `-available-cycle` – Sort records by their availableCycle field in descending order
            * `available-shift` – Sort records by their availableShift field in ascending order
            * `available-shift` – Sort records by their availableShift field in descending order
            * `available-drive` – Sort records by their availableDrive field in ascending order
            * `-available-drive` – Sort records by their availableDrive field in descending order
            * `software-version` – Sort records by their softwareVersion field in ascending order
            * `-software-version` – Sort records by their softwareVersion field in descending order
            * `next-violation-timestamp` – Sort records by their nextViolationTimestamp field in ascending order
            * `-next-violation-timestamp` – Sort records by their nextViolationTimestamp field in descending order
            * `uncertified-logs` – Sort records by their uncertifiedLogs field in ascending order
            * `-uncertified-logs` – Sort records by their uncertifiedLogs field in descending order
            * `last-changed-date` – Sort records by their last change date field in ascending order
            * `-last-changed-date` – Sort records by their last change date field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverStatus'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/stats/driverStatuses:
    get:
      tags:
      - driverStatus
      summary: Get driver status stats
      operationId: getDriverStatusStats
      # TODO: extract these to reusable parameters
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - name: user-id
        in: query
        description: counts records for the specified Users
        schema:
          type: string
      - name: asset-id
        in: query
        description: counts records for a specified Asset
        schema:
          type: string
      - name: terminal-id
        in: query
        description: counts records for Drivers assigned to the specified Terminal
        schema:
          type: string
      - name: active
        in: query
        description: counts records depending on active or inactive Drivers
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/eldMalfunctions/{recordIds}:
    delete:
      tags:
        - eldMalfunction
      summary: Delete eld malfunction
      operationId: deleteEldMalfunction
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ELDMalfunction'
      security:
        - BasicAuth: []
        - OAuth2: []
  /api/v2/eldMalfunctions:
    get:
      tags:
        - eldMalfunction
      summary: Get one or more account properties by name or record ids. If no name
        or ids are specified all properties will be returned (subject to any paging
        limits). System properties will only be returned if the user has the appropriate
        permissions. If a single name is specified, all other filter criteria are
        ignored.
      operationId: getEldMalfunction
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/userIdArrayParam"
        - $ref: "#/components/parameters/assetIdArrayParam"
        - $ref: "#/components/parameters/fromChangeTimestampParam"
        - $ref: "#/components/parameters/toChangeTimestampParam"
        - $ref: "#/components/parameters/fromTimestampParam"
        - $ref: "#/components/parameters/toTimestampParam"
        - $ref: "#/components/parameters/eventTypeArrayParam"
        - $ref: "#/components/parameters/systemParam"
        - $ref: "#/components/parameters/clearedParam"
        - $ref: "#/components/parameters/descriptionParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/driverAliasArrayParam"
        - in: query
          name: sort
          required: false
          description: >
            Sort: order
              * `id` – Sort records by their id field in ascending order (DEFAULT)
              * `-id` – Sort records by their id field in descending order
              * `asset-id` – Sort records by their assetId field in ascending order
              * `-asset-id` – Sort records by their assetId field in descending order
              * `asset-vin` – Sort records by the vin field of the asset based on their assetId field in ascending order
              * `-asset-vin` – Sort records by the vin field of the asset based on their assetId field in descending order
              * `asset-name` – Sort records by the name field of the asset based on their assetId field in ascending order
              * `-asset-name` – Sort records by the name field of the asset based on their assetId field in descending order
              * `user-id` – Sort records by their userId field in ascending order
              * `-user-id` – Sort records by their userId field in descending order
              * `user-name` – Sort records by the lastName, firstName and suffix fields of the user based on their userId field in ascending order
              * `-user-name` – Sort records by the lastName, firstName and suffix fields of the user based on their userId field in descending order
              * `event-type` – Sort records by their eventType field in ascending order
              * `-event-type` – Sort records by their eventType field in descending order
              * `begin-timestamp` – Sort records by their beginTimestamp field in ascending order
              * `-begin-timestamp` – Sort records by their beginTimestamp field in descending order
              * `end-timestamp` – Sort records by their endTimestamp field in ascending order
              * `-end-timestamp` – Sort records by their endTimestamp field in descending order
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ELDMalfunction'
      security:
        - BasicAuth: []
        - OAuth2: []
    put:
      tags:
        - eldMalfunction
      summary: Update one or more eld malfunctions.
      operationId: updateEldMalfunction
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ELDMalfunction'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ELDMalfunction'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
        - eldMalfunction
      summary: Create one or more eld malfunctions.
      operationId: createEldMalfunction
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ELDMalfunction'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ELDMalfunction'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/emailValidation:
    get:
      tags:
        - emailValidation
      summary: This API accepts an email address or a list of email addresses as parameter and
        returns a message if the email address/es is/are valid or not.
      operationId: getEmailValidation
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - name: email-list
          in: query
          description: The email addresses to be verified. Comma separated list (email-list=test@me.net,some@other.email,anotherone@this.com)
          explode: false
          schema:
            type: array
            items:
              type: string
              format: email
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
      security:
        - BasicAuth: []
        - OAuth2: []
  /api/v2/equipment/{recordIds}:
    get:
      tags:
      - equipment
      summary: Get equipment records.
      operationId: getEquipment
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/nameParam"
      - $ref: "#/components/parameters/assetTypeArrayParam"
      - $ref: "#/components/parameters/homeTerminalIdParam"
      - $ref: "#/components/parameters/fromDeletedAtParam"
      - $ref: "#/components/parameters/fromChangeTimestampParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `name` – Sort records by their name field in ascending order
            * `-name` – Sort records by their name field in descending order
            * `asset-type` – Sort records by their assetType in ascending order
            * `-asset-type` – Sort records by their assetType field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Equipment'
      security:
      - BasicAuth: []
      - OAuth2: []
    delete:
      tags:
      - equipment
      summary: Deletes an equipment record.
      description: |
        Supports soft delete. Requires the PERM_EDIT_EQUIPMENT permission for Users and Drivers. Drivers can be allowed to delete Equipment if the “hos.driver.equipment.delete” Account Property and their “HOS_DELETE_EQUIPMENT” User Preference are both set to true.

        Delete for the Equipment API is implemented using a soft-delete. This prevents SQL’s Cascade Delete from deleting any Driving records associated with a deleted piece of Equipment. Eventually, following the motor carrier’s data retention policy, the soft-delete will become a hard-delete.
      operationId: deleteEquipment
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Equipment'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/equipment/meta/names/{recordIds}:
    get:
      tags:
      - equipment
      summary: Get equipment meta records.
      operationId: getEquipmentMeta
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - name: search
        in: query
        description: 'Searches for records with names like the specified parameter.
          Example: search=foo would match records with names ''foobar'', ''foobaz'',
          ''whofoobar''.'
        schema:
          type: string
      - $ref: "#/components/parameters/assetTypeArrayParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `name` – Sort records by their name field in ascending order
            * `-name` – Sort records by their name field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EquipmentMeta'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/equipment:
    put:
      tags:
      - equipment
      summary: Update equipment records.
      description: 'Required fields: assetType, name, id. Note: When fields are not
        included in PUT, they are saved as their default values (false for boolean
        types, empty strings for text and character types). When there is no visibility
        set ids saved, the account’s default visibility set is set. Users with PERM_IS_ASSETADMIN
        only cannot assign or remove visibility sets they do not have access to.'
      operationId: updateEquipment
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The equipment records to update.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Equipment'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Equipment'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
      - equipment
      summary: Create equipment records.
      operationId: createEquipment
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The equipment records to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Equipment'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Equipment'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/defaultUserPreferences:
    get:
      tags:
      - defaultUserPreferences
      summary: get defaultUserPreferences.
      operationId: getDefaultUserPreferences
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultUserPreferences'
      security:
      - BasicAuth: []
      - OAuth2: []
    put:
      tags:
      - defaultUserPreferences
      summary: Update defaultUserPreferences.
      description: This updates Default User Preferences. Fields accountId, isParent,
        and lastChangedDate are auto populated.
      operationId: updateDefaultUserPreferences
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The equipment records to update.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DefaultUserPreferences'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultUserPreferences'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/driverViolationDocuments/{recordIds}:
    get:
      tags:
      - driverViolationDocuments
      summary: get driverViolationDocument.
      operationId: getDriverViolationDocument
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/driverAliasArrayParam"
      - name: driver-violation-id
        in: query
        description: A comma separated list of driver-violation-ids. Retrieves matching
          records for a specific driver-violation-id or driver-violation-ids (e.g
          driver-violation-id=496650, driver-violation-id=123,456)
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
            format: int64
      - $ref: "#/components/parameters/userIdArrayParam"
      - $ref: "#/components/parameters/fromChangeTimestampParam"
      - $ref: "#/components/parameters/toChangeTimestampParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `key` – Sort records by their key field in ascending order
            * `-key` – Sort records by their key field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverViolationDocuments'
      security:
      - BasicAuth: []
      - OAuth2: []
    delete:
      tags:
      - driverViolationDocuments
      summary: Delete driverViolationDocuments.
      operationId: deleteDriverViolationDocuments
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - name: recordIds
        in: path
        description: The single record id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverViolationDocuments'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/driverViolationDocuments:
    get:
      tags:
      - driverViolationDocuments
      summary: get driverViolationDocuments.
      operationId: getDriverViolationDocuments
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/fromChangeTimestampParam"
      - $ref: "#/components/parameters/toChangeTimestampParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/driverAliasArrayParam"
      - name: driver-violation-id
        in: query
        description: Retrieves records associated with the supplied Driver Violation
          (e.g. driver-violation-id=2104043, all Driver Violations by default).
        schema:
          type: string
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `key` – Sort records by their key field in ascending order
            * `-key` – Sort records by their key field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverViolationDocuments'
      security:
      - BasicAuth: []
      - OAuth2: []
    put:
      tags:
      - driverViolationDocuments
      summary: update driverViolationDocuments.
      description: This updates Driver Violation documents
      operationId: updateDriverViolationDocuments
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The Driver Violation documents to update. The userId and driverViolationId
          are required.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverViolationDocuments'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverViolationDocuments'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
      - driverViolationDocuments
      summary: create driverViolationDocuments.
      description: This creates Driver Violation documents. The userId and driverViolationId
        are required.
      operationId: createDriverViolationDocuments
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - json
              properties:
                json:
                  type: array
                  items:
                    $ref: '#/components/schemas/DriverViolationDocuments'
                  description: The driver daily document records to create.
                file:
                  type: array
                  description: The driver daily document media and receipts.
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverViolationDocuments'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/certifiedLogs:
    get:
      tags:
      - certifiedLogs
      summary: get certifiedLogs in the PDF format.
      operationId: getCertifiedLogs
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/logDateParam"
      - $ref: "#/components/parameters/userIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/pdf:
              schema:
                type: string
                format: binary
      security:
      - BasicAuth: []
      - OAuth2: []
    post:
      tags:
      - certifiedLogs
      summary: Upload certifiedLogs PDF
      description: 'To upload a Certified Log. The request must be a multipart and
        must have a PDF file. '
      operationId: uploadCertifiedLog
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/logDateParam"
      - $ref: "#/components/parameters/userIdParam"
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              properties:
                file:
                  type: string
                  description: The certifiedLogs PDF to upload.
                  format: binary
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
      security:
      - BasicAuth: []
      - OAuth2: []
    delete:
      tags:
      - certifiedLogs
      summary: delete certifiedLogs in the PDF format.
      operationId: deleteCertifiedLogs
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/logDateParam"
      - $ref: "#/components/parameters/userIdParam"
      responses:
        200:
          description: successful operation
          content: {}
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/certifiedLogExport:
    get:
      tags:
      - certifiedLogs
      summary: get certifiedLogs in a zip file.
      operationId: getCertifiedLogExport
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/logDateParam"
      - $ref: "#/components/parameters/userIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/zip:
              schema:
                type: string
                format: binary
      security:
      - BasicAuth: []
      - OAuth2: []
    post:
      tags:
      - certifiedLogs
      summary: Create certifiedLogs PDF
      description: Create a Certified Log with logDate and userId parameters.
      operationId: createCertifiedLog
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/logDateParam"
      - $ref: "#/components/parameters/userIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/certifiedLogReport: 
    post:
      tags:
      - certifiedLogs
      summary: Create certified Log Report PDF
      description: Create a Certified Log Report with logDate and userId parameters.
      operationId: createCertifiedLogReport
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/logDateParam"
      - $ref: "#/components/parameters/userIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/pdf:
              schema:
                type: string
                format: binary
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/hosCarrierProperties/{recordIds}:
    delete:
      tags:
        - hosCarrierProperties
      deprecated: true
      summary: Deletes a single hos carrier properties record.
      operationId: deleteHosCarrierProperties
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HosCarrierProperties'
      security:
        - BasicAuth: []
        - OAuth2: []
  /api/v2/hosCarrierProperties:
    get:
      tags:
        - hosCarrierProperties
      deprecated: true
      summary: The HOS Carrier Properties endpoint handles a collection of Carriers from which admin personnel can
        assign Drivers to, depending on which Carrier they are working for on that particular day.
        It should be noted that values saved using this API are saved into the Account Property named
        “hos.carrier.information” and if the default Carrier is edited, it also updates the “hos.mainoffice.*” Account Properties.
      operationId: getHosCarrierProperties
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HosCarrierProperties'
      security:
        - BasicAuth: []
        - OAuth2: []
    put:
      tags:
        - hosCarrierProperties
      deprecated: true
      summary: Update a list of hos carrier properties records
      operationId: updateHosCarrierProperties
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The hos carrier properties records to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/HosCarrierProperties'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HosCarrierProperties'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
        - hosCarrierProperties
      deprecated: true
      summary: Creates new hos carrier properties records.
      operationId: createHosCarrierProperties
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The hos carrier properties records to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/HosCarrierProperties'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HosCarrierProperties'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v3/hosCarrierProperties:
    get:
      tags:
        - hosCarrierPropertiesV3
      summary: The HOS Carrier Properties endpoint handles a collection of Carriers from which admin personnel can
        assign Drivers to, depending on which Carrier they are working for on that particular day.
        It should be noted that values saved using this API are saved into the Account Property named
        “hos.carrier.information” and if the default Carrier is edited, it also updates the “hos.mainoffice.*” Account Properties.
      operationId: getHosCarrierPropertiesV3
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/carrierNameParam"
        - $ref: "#/components/parameters/idParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - in: query
          name: sort
          required: false
          description: >
            Sort: order
              * `id` – Sort records by their id field in ascending order (DEFAULT)
              * `-id` – Sort records by their id field in descending order
              * `name` – Sort records by their name field in ascending order
              * `-name` – Sort records by their name field in descending order
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HosCarrierProperties'
      security:
        - BasicAuth: []
        - OAuth2: []
    put:
      tags:
        - hosCarrierPropertiesV3
      summary: Update a list of hos carrier properties records
      operationId: updateHosCarrierPropertiesV3
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The hos carrier properties records to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/HosCarrierProperties'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HosCarrierProperties'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
        - hosCarrierPropertiesV3
      summary: Creates new hos carrier properties records.
      operationId: createHosCarrierPropertiesV3
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The hos carrier properties records to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/HosCarrierProperties'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HosCarrierProperties'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/userPreferences/{recordIds}:
    get:
      tags:
      - userPreferences
      summary: Get user preferences.
      operationId: getUserPreferences
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/userIdArrayParam"
      - $ref: "#/components/parameters/fromChangeTimestampParam"
      - $ref: "#/components/parameters/toChangeTimestampParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/keyArrayParam"
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `key` – Sort records by their key field in ascending order
            * `-key` – Sort records by their key field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPreference'
      security:
      - BasicAuth: []
      - OAuth2: []
    delete:
      tags:
      - userPreferences
      summary: Delete user preferences.
      operationId: deleteUserPreferences
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPreference'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/userPreferences:
    put:
      tags:
      - userPreferences
      summary: Update user preferences
      operationId: updateUserPreferences
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The user preferences to update.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserPreference'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPreference'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
      - userPreferences
      summary: Create user preferences
      operationId: createUserPreferences
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The user preferences to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserPreference'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPreference'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/driverHistories/{recordIds}:
    get:
      tags:
      - driverHistory
      summary: Get a list of driver histories based on input record identifiers.
      description: |
        The Driver History events on his/her Logs are stored and accessed using the driverHistories endpoint.  This API provides access to Driving History information such as the Record Status, Event Record Origin, and Event Type for records which are either recorded automatically, created manually by a Driver, or created manually by an Authorized Personnel.

          * Driver’s Duty Status change – OnDuty, OffDuty, Driving, Sleeper, WaitingAtSite
          * Intermediate Log – recorded at a set interval while the driver is driving
          * Personal Driving Status – Yard Moves or Personal Conveyance
          * Certification of Driver Daily
          * Eld Login/Logout Activity – automatically recorded by the ELD
          * Eld Login/Logout Activity – automatically recorded by the ELD
          * Malfunction and Diagnostic Events – automatically recorded by the ELD
      operationId: getDriverHistory
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/userIdArrayParam"
      - $ref: "#/components/parameters/assetIdArrayParam"
      - $ref: "#/components/parameters/eventTypeArrayParam"
      - $ref: "#/components/parameters/recordStatusArrayParam"
      - $ref: "#/components/parameters/recordOriginArrayParam"
      - $ref: "#/components/parameters/fromEventTimeParam"
      - $ref: "#/components/parameters/toEventTimeParam"
      - $ref: "#/components/parameters/fromCanAdditionalHoursWorkShiftStartParam"
      - $ref: "#/components/parameters/toCanAdditionalHoursWorkShiftStartParam"
      - $ref: "#/components/parameters/fromChangeTimestampParam"
      - $ref: "#/components/parameters/toChangeTimestampParam"
      - $ref: "#/components/parameters/fromDeletedAtParam"
      - $ref: "#/components/parameters/noteArrayParam"
      - $ref: "#/components/parameters/uuidParam"
      - $ref: "#/components/parameters/driverEditParam"
      - $ref: "#/components/parameters/driverSystemParam"
      - $ref: "#/components/parameters/homeTerminalIdParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/driverAliasArrayParam"
      - $ref: "#/components/parameters/userUuidParam"
      - name: sort
        in: query
        description: |
          Sort: order
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `uuid` – Sort records by their uuid field in ascending order
            * `-uuid` – Sort records by their uuid field in descending order
            * `first-name` – Sort records by the firstName field of the user in ascending order
            * `-first-name` – Sort records by their firstName field of the user in descending order
            * `last-name` – Sort records by the lastName field of the user in ascending order
            * `-last-name` – Sort records by their lastName field of the user in descending order
            * `suffix` – Sort records by the suffix field of the user in ascending order
            * `-suffix` – Sort records by their suffix field of the user in descending order
            * `event-time` – Sort records by their eventTime field in ascending order
            * `-event-time` – Sort records by their eventTime field in descending order
            * `last-changed-date` – Sort records by their last change date field in ascending order
            * `-last-changed-date` – Sort records by their last change date field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverHistory'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/driverHistories:
    put:
      tags:
      - driverHistory
      summary: Update driver history records.
      description: 'Required fields: assetType, name, id. Note: When fields are not
        included in PUT, they are saved as their default values (false for boolean
        types, empty strings for text and character types). When there is no visibility
        set ids saved, the account’s default visibility set is set. Users with PERM_IS_ASSETADMIN
        only cannot assign or remove visibility sets they do not have access to.'
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      operationId: updateDriverHistory
      requestBody:
        description: The driver history records to update.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverHistory'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverHistory'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
      - driverHistory
      summary: Create driver histories.
      description: 'The Driver History events recorded using this endpoint are the
        driver’s log and are transferred, after suitable formatting, to the FMCSA
        upon request.  Events such as OnDuty or OffDuty records from a timekeeping
        system may also be entered into a driver’s log using this api.  Events in
        Driver History should never be deleted.  This API is intended to contain the
        driver’s permanent record of Driver History events. Driver Histories are automatically
        deleted after a specific period of time following the data retention policy.
        These are the required fields: userId, uuid, recordStatus, username, eventType,
        recordOrigin, eventTime. Recommended Fields: all required fields, validBeginTime,
        validEndTime'
      operationId: createDriverHistory
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The driver histories to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverHistory'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverHistory'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/driverHistories/meta/vehiclesDriven:
    get:
      tags:
      - driverHistory
      summary: Get a list of vehicle identifiers driven based on passed in user identifiers.
      operationId: getVehiclesDriven
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/userIdArrayParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              # TODO: fix this
              schema:
                type: string
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/driverHistories/meta/unidentifiedDrivingEvents:
    get:
      tags:
      - driverHistory
      summary: Get driver history records for unidentified events.
      operationId: getDriverHistoryUnidentifiedEvents
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/assetIdArrayParam"
      - $ref: "#/components/parameters/eventTypeArrayParam"
      - $ref: "#/components/parameters/recordStatusArrayParam"
      - $ref: "#/components/parameters/recordOriginArrayParam"
      - $ref: "#/components/parameters/fromEventTimeParam"
      - $ref: "#/components/parameters/toEventTimeParam"
      - $ref: "#/components/parameters/homeTerminalIdParam"
      - $ref: "#/components/parameters/isClassifiedParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - name: sort
        in: query
        description: |
          Sort: order
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `uuid` – Sort records by their uuid field in ascending order
            * `-uuid` – Sort records by their uuid field in descending order
            * `first-name` – Sort records by the firstName field of the user in ascending order
            * `-first-name` – Sort records by their firstName field of the user in descending order
            * `last-name` – Sort records by the lastName field of the user in ascending order
            * `-last-name` – Sort records by their lastName field of the user in descending order
            * `suffix` – Sort records by the suffix field of the user in ascending order
            * `-suffix` – Sort records by their suffix field of the user in descending order
            * `event-time` – Sort records by their eventTime field in ascending order
            * `-event-time` – Sort records by their eventTime field in descending order
            * `last-changed-date` – Sort records by their last change date field in ascending order
            * `-last-changed-date` – Sort records by their last change date field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverHistory'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/driverHistories/meta/unidentifiedDriverHistories:
    post:
      tags:
        - driverHistory
      summary: Create driver histories for unidentified driver.
      description: 'The Unidentified Driver History events recorded using this endpoint are the
        driver’s log and are transferred, after suitable formatting, to the FMCSA
        upon request.  Events such as OnDuty or OffDuty records from a timekeeping
        system may also be entered into a driver’s log using this api.  Events in
        Driver History should never be deleted.  This API is intended to contain the
        driver’s permanent record of Driver History events. Driver Histories are automatically
        deleted after a specific period of time following the data retention policy.
        These are the required fields: userId, uuid, recordStatus, username, eventType,
        recordOrigin, eventTime. Recommended Fields: all required fields, validBeginTime,
        validEndTime'
      operationId: createUnidentifiedDriverHistory
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The unidentified driver histories to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverHistory'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverHistory'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    put:
      tags:
        - driverHistory
      summary: Update driver history records for unidentified driver.
      description: 'Required fields: assetType, name, id. Note: When fields are not
        included in PUT, they are saved as their default values (false for boolean
        types, empty strings for text and character types). When there is no visibility
        set ids saved, the account’s default visibility set is set. Users with PERM_IS_ASSETADMIN
        only cannot assign or remove visibility sets they do not have access to.'
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      operationId: updateUnidentifiedDriverHistory
      requestBody:
        description: The unidentified driver history records to update.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverHistory'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverHistory'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/drivers/meta/names/{recordIds}:
    get:
      tags:
      - driver
      summary: Get drivers names
      operationId: getDriversNames
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/uuidParam"
      - name: active
        in: query
        description: |
          Retrieves matching records depending on the boolean value specified. (e.g. active=true)
            * If true, only active Drivers is retrieved.
            * If false, only inactive Drivers is retrieved.
            * If parameter is not included or null, all Drivers are retrieved.
        schema:
          type: boolean
      - name: system
        in: query
        description: |
          Retrieves matching records based on Driver type, depending on the boolean value specified. (e.g. system=true, false by default)

            * If true, only the unidentifiedDriver Account is retrieved.
            * If false, only actual Drivers are retrieved.
            * Wild-carding using system=* or system=true,false will retrieve all Drivers
        schema:
          type: string
      - name: search
        in: query
        description: Retrieves matching records whose full name or email matches the
          parameter specified (e.g. search=John Doe Jr., all Drivers by default).
        schema:
          type: string
      - name: name
        in: query
        description: Retrieves matching records whose full name matches the parameter
          specified (e.g. name=John Doe, all Drivers by default).
        schema:
          type: string
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/limitParam"
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `email` – Sort records by their email field in ascending order
            * `-email` – Sort records by their email field in descending order
            * `terminal.name` – Sort records by their terminal name in ascending order
            * `-terminal.name` – Sort records by their terminal name in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/drivers/{recordIds}:
    get:
      tags:
      - driver
      summary: Get drivers
      operationId: getDrivers
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/uuidParam"
      - name: alias
        in: query
        description: Retrieves matching records with the specified alias (e.g. alias=Driver-01).
        schema:
          type: string
      - name: active
        in: query
        description: |
          Retrieves matching records depending on the boolean value specified. (e.g. active=true)
            * If true, only active Drivers is retrieved.
            * If false, only inactive Drivers is retrieved.
            * If parameter is not included or null, all Drivers are retrieved.
        schema:
          type: boolean
      - name: first-name
        in: query
        description: Retrieves matching records with the specified first name (e.g.
          first-name=John).
        schema:
          type: string
      - $ref: "#/components/parameters/homeTerminalIdArrayParam"
      - name: subset-id
        in: query
        description: Retrieves matching records whose subsetId matches the specified
          parameter (e.g. subset-id=940, returns drivers from all subsets by default).
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
            format: int64
      - $ref: "#/components/parameters/deletedAtParam"
      - $ref: "#/components/parameters/fromDeletedAtParam"
      - $ref: "#/components/parameters/toDeletedAtParam"
      - name: system
        in: query
        description: |
          Retrieves matching records based on Driver type, depending on
           the boolean value specified. (e.g. system=true, false by default)

            * If true, only the unidentifiedDriver Account is retrieved.
            * If false, only actual Drivers are retrieved.
            * Wild-carding using system=* or system=true,false will retrieve all Drivers
        schema:
          type: string
      - name: search
        in: query
        description: Retrieves matching records whose full name or email matches the
          parameter specified (e.g. search=John Doe Jr., all Drivers by default).
        schema:
          type: string
      - $ref: "#/components/parameters/fromChangeTimestampParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/limitParam"
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `email` – Sort records by their email field in ascending order
            * `-email` – Sort records by their email field in descending order
            * `last-changed-date` – Sort records by their last change date field in ascending order
            * `-last-changed-date` – Sort records by their last change date field in descending order
            * `terminal.name` – Sort records by their terminal name in ascending order
            * `-terminal.name` – Sort records by their terminal name in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
      security:
      - BasicAuth: []
      - OAuth2: []
    delete:
      tags:
      - driver
      summary: Delete drivers
      operationId: deleteDrivers
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdParam"
      - $ref: "#/components/parameters/uuidParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/drivers/uuid/{uuid}:
    get:
      tags:
        - driver
      summary: Get driver by UUID (without account). Although an account is passed in, this is for authentication. The driver need not be associated with this account id.
      operationId: getDriversByUuid
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/uuidPathParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
      security:
        - BasicAuth: [ ]
        - OAuth2: [ ]
  /api/v2/drivers:
    put:
      tags:
      - driver
      summary: Update drivers
      operationId: updateDrivers
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The drivers to update.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Driver'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
      - driver
      summary: Create drivers
      operationId: createDrivers
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The drivers to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Driver'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/driverDailies/{recordIds}:
    get:
      tags:
      - driverDaily
      summary: 'The Driver Dailies endpoint provides a summary of a Driver’s day.  This
        record is updated throughout the Day and may be in a Certified or Uncertified
        state.  When the Driver certifies his log and the certification process produces
        a PDF document using the following fields: Driver Mileage, Driver Information,
        Driver History, Settings, and completed DVIRs.  In addition when a Driver
        certifies his log, the Driver Dailies API is updated to record the Driver’s
        final OnDutyND, Driving, OffDuty, and Sleeper hours for the day.  These hours
        may be useful to populate planning systems for Driver scheduling.'
      operationId: getDriverDaily
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/userIdArrayParam"
      - $ref: "#/components/parameters/dateParam"
      - $ref: "#/components/parameters/logDateParam"
      - $ref: "#/components/parameters/fromLogDateParam"
      - $ref: "#/components/parameters/toLogDateParam"
      - $ref: "#/components/parameters/fromChangeTimestampParam"
      - $ref: "#/components/parameters/toChangeTimestampParam"
      - $ref: "#/components/parameters/homeTerminalIdParam"
      - $ref: "#/components/parameters/systemParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/driverAliasArrayParam"
      - name: sort
        in: query
        description: |
          Sort: order
            * `date` – Sort records by their log date field in ascending order
            * `-date` – Sort records by their log date field in descending order
            * `driver-name` – Sort records by their full name field in ascending order
            * `-driver-name` – Sort records by their full name field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverDaily'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/driverDailies:
    put:
      tags:
      - driverDaily
      summary: Update a driver daily record
      operationId: updateDriverDaily
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The driver daily record to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverDaily'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverDaily'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
      - driverDaily
      summary: Create a driver daily record
      operationId: createDriverDaily
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The driver daily record to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverDaily'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverDaily'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/driverDailies/meta/counts:
    get:
      tags:
      - driverDaily
      summary: Returns the number of certified and certifiable logs
      operationId: getDriverDailyCounts
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  certifiedLogs:
                    type: integer
                  uncertifiedLogs:
                    type: integer
                  driverCounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/DriverDailyCount'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/driverDailyDocuments/{recordIds}:
    get:
      tags:
      - driverDailyDocument
      summary: The Driver Daily Documents are the supporting Documents attached by
        the User of the Hours of Service application. The Documents are used to check
        their Logs for accuracy.
      operationId: getDriverDailyDocument
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/userIdArrayParam"
      - $ref: "#/components/parameters/dailyDriverIdArrayParam"
      - $ref: "#/components/parameters/fromChangeTimestampParam"
      - $ref: "#/components/parameters/toChangeTimestampParam"
      - $ref: "#/components/parameters/fromDateTimeParam"
      - $ref: "#/components/parameters/toDateTimeParam"
      - $ref: "#/components/parameters/documentTypeParam"
      - $ref: "#/components/parameters/assetIdArrayParam"
      - $ref: "#/components/parameters/fuelTypeParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/driverAliasArrayParam"
      - name: sort
        in: query
        description: |
          Sort: order
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `last-changed-date` – Sort records by their last change date field in ascending order
            * `-last-changed-date` – Sort records by their last change date field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverDailyDocument'
      security:
      - BasicAuth: []
      - OAuth2: []
    delete:
      tags:
      - driverDailyDocument
      summary: Deletes an driver daily document record.
      operationId: deleteDriverDailyDocument
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverDailyDocument'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/driverDailyDocuments:
    put:
      tags:
      - driverDailyDocument
      summary: Update a driver daily document record
      operationId: updateDriverDailyDocument
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The driver daily document record to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverDailyDocument'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverDailyDocument'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
      - driverDailyDocument
      summary: To create add a Driver Daily Document. The request must be a multipart.
      operationId: createDriverDailyDocument
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - json
              properties:
                json:
                  type: array
                  items:
                    $ref: '#/components/schemas/DriverDailyDocument'
                  description: The driver daily document records to create.
                file:
                  type: array
                  description: The driver daily document media and receipts.
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverDailyDocument'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/accounts/{recordIds}:
    get:
      tags:
      - account
      summary: Get Accounts
      operationId: getAccounts
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/nameParam"
      - $ref: "#/components/parameters/uuidParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/limitParam"
      - name: sort
        in: query
        description: |
          Sort order:

            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `name` – Sort records by their name field in ascending order
            * `-name` – Sort records by their name field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      security:
      - BasicAuth: []
      - OAuth2: []
    delete:
      tags:
      - account
      summary: Delete Accounts (required Account Admin Role)
      operationId: deleteAccounts
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdParam"
      - $ref: "#/components/parameters/uuidParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/accounts/meta/tree:
    get:
      tags:
      - account
      summary: Get Accounts Tree
      operationId: getAccountsTree
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/accountNameParam"
      - name: root-account-id
        in: query
        description: The account id of the root account to fetch. Otherwise uses the
          account id of the current user.
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/accounts:
    put:
      tags:
      - account
      summary: Update Accounts. Requires Account Admin role.
      operationId: updateAccounts
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Account'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
      - account
      summary: 'Create Accounts. Requires Account Admin role. Note: Must not contain
        an ID. When creating an account, a terminal with the “mainOffice” field set
        to true must also be created via the Terminals API'
      operationId: createAccounts
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Account'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/users:
    post:
      tags:
      - user
      summary: "Create Users."
      operationId: createUsers
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
      security:
      - BasicAuth: [ ]
      - OAuth2: []
      x-codegen-request-body-name: body
    put:
      tags:
      - user
      summary: "Update Users."
      operationId: updateUsers
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
      security:
      - BasicAuth: [ ]
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/users/meta/names/{recordIds}:
    get:
      tags:
      - user
      summary: "Get Users, smaller projection."
      operationId: getUsersNames
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/uuidParam"
      - name: system
        in: query
        description: |
          Retrieves matching records based on User type, depending on the boolean value specified. (e.g. system=true, false by default)

            * If true, only the unidentifiedUser Account is retrieved.
            * If false, only actual Users are retrieved.
            * Wild-carding using system=* or system=true,false will retrieve all Users
        schema:
          type: string
      - name: search
        in: query
        description: Retrieves matching records whose full name or email matches the
          parameter specified (e.g. search=John Doe Jr., all Users by default).
        schema:
          type: string
      - name: name
        in: query
        description: Retrieves matching records whose full name matches the parameter
          specified (e.g. name=John Doe, all Users by default).
        schema:
          type: string
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/limitParam"
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `email` – Sort records by their email field in ascending order
            * `-email` – Sort records by their email field in descending order
            * `terminal.name` – Sort records by their terminal name in ascending order
            * `-terminal.name` – Sort records by their terminal name in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
      - BasicAuth: [ ]
      - OAuth2: []
  /api/v2/users/{recordIds}:
    get:
      tags:
      - user
      summary: Get users
      operationId: getUsers
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - name: alias
        in: query
        description: Retrieves matching records with the specified alias (e.g. alias=User-01).
        schema:
          type: string
      - name: first-name
        in: query
        description: Retrieves matching records with the specified first name (e.g.
          first-name=John).
        schema:
          type: string
      - name: last-name
        in: query
        description: Retrieves matching records with the specified last name (e.g.
          last-name=Doe).
        schema:
          type: string
      - name: suffix
        in: query
        description: Retrieves matching records with the specified suffix (e.g.
          suffix=Jr.).
        schema:
          type: string
      - name: sort-authorized-terminal
        in: query
        description: If true, sorts the terminals by name.
        schema:
          type: boolean
      - $ref: "#/components/parameters/homeTerminalIdArrayParam"
      - $ref: "#/components/parameters/authorizedTerminalIdArrayParam"
      - $ref: "#/components/parameters/deletedAtParam"
      - $ref: "#/components/parameters/fromDeletedAtParam"
      - $ref: "#/components/parameters/toDeletedAtParam"
      - $ref: "#/components/parameters/uuidParam"
      - name: system
        in: query
        description: |
          Retrieves matching records based on User type, depending on
           the boolean value specified. (e.g. system=true, false by default)

            * If true, only the unidentifiedUser Account is retrieved.
            * If false, only actual Users are retrieved.
            * Wild-carding using system=* or system=true,false will retrieve all Users
        schema:
          type: string
      - name: search
        in: query
        description: Retrieves matching records whose full name or email matches the
          parameter specified (e.g. search=John Doe Jr., all Users by default).
        schema:
          type: string
      - name: driver
        in: query
        description: Retrieves matching records where the user is a driver.
        schema:
          type: boolean
      - name: permission
        in: query
        description: Retrieves matching records where the user has the given permission.
        schema:
          type: string
      - $ref: "#/components/parameters/fromChangeTimestampParam"
      - $ref: "#/components/parameters/toChangeTimestampParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/limitParam"
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `name` – Sort records by their name field in ascending order
            * `-name` – Sort records by their name field in descending order
            * `first-name` – Sort records by their name field in ascending order
            * `-first-name` – Sort records by their name field in descending order
            * `last-name` – Sort records by their name field in ascending order
            * `-last-name` – Sort records by their name field in descending order
            * `suffix` – Sort records by their name field in ascending order
            * `-suffix` – Sort records by their name field in descending order
            * `email` – Sort records by their email field in ascending order
            * `-email` – Sort records by their email field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
      - BasicAuth: [ ]
      - OAuth2: []
    delete:
      tags:
      - user
      summary: Delete users
      operationId: deleteUsers
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdParam"
      - $ref: "#/components/parameters/uuidParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
      - BasicAuth: [ ]
      - OAuth2: []
  /api/v2/certifiedLogSendEmail/:
    post:
      tags:
      - certifiedLogSendEmail
      summary: 'Certified Log Send Email is used to send the Driver’s Certified Log(s) to a specific email address. The API accepts a plain HTTP request with parameters specifying which PDF(s) to be retrieved from the server, or a multipart request with parameters and the PDF(s) to be sent to the email address specified. All parameters are required in order to construct the email subject and body.'
      operationId: certifiedLogSendEmail
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/userIdParam"
      - $ref: "#/components/parameters/logDateParam"
      - $ref: "#/components/parameters/emailAddressParam"
      - $ref: "#/components/parameters/appNameParam"
      requestBody:
        description: Send by HTTP request.
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: array
                  description: The driver daily document media and receipts.
                  items:
                    type: string
                    format: binary
        required: false
      responses:
        200:
          description: Certified log was emailed successfully
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v3/certifiedLogSendEmail/:
    post:
      tags:
      - certifiedLogSendEmail
      summary: 'Certified Log Send Email is used to send the Driver’s Certified and Uncertified Log(s) to a specific email address. The API accepts a plain HTTP request with parameters specifying which PDF(s) to be retrieved from the server, or a multipart request with parameters and the PDF(s) to be sent to the email address specified. All parameters are required in order to construct the email subject and body.'
      operationId: certifiedLogSendEmailV3
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/userUuidParam"
      - $ref: "#/components/parameters/logDateParam"
      - $ref: "#/components/parameters/emailAddressParam"
      - $ref: "#/components/parameters/appNameParam"
      requestBody:
        description: Send by HTTP request.
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: array
                  description: The driver daily document media and receipts.
                  items:
                    type: string
                    format: binary
        required: false
      responses:
        200:
          description: Certified log was emailed successfully
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/fmcsa/submit:
    post:
      tags:
      - fmcsaWebService
      summary: 'Allows drivers to send ELD data in a plain POST request that will in turn SUBMIT
                the data to the FMCSA Web Service, where it will be validated'
      operationId: fmcsaSubmit
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FmcsaRequest'
        required: true
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FmcsaResponse'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/fmcsa/multipleSubmit:
    post:
      tags:
      - fmcsaWebService
      operationId: fmcsaMultipleSubmit
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: Request for multiple fmcsa submit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FmcsaMultiRequest'
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FmcsaMultiResponse'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/fmcsa/ping:
    get:
      tags:
      - fmcsaWebService
      summary: 'Conducts a connectivity diagnostic check without submitting any
                data to the FMCSA service'
      operationId: fmcsaPing
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/eldIdentifierParam"
      - $ref: "#/components/parameters/eldRegistrationIdParam"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FmcsaPing'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/fmcsa/email:
    post:
      tags:
      - fmcsaWebService
      summary: 'Allows Drivers to send ELD data in a multipart POST request containing a CSV
                file with the ELD data inside it. The file will be sent to the server,
                encrypted and then sent to the FMCSA enforcement personnel for decryption
                and verification.'
      operationId: fmcsaEmail
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/eldIdentifierParam"
      - $ref: "#/components/parameters/eldRegistrationIdParam"
      - $ref: "#/components/parameters/emailMessageParam"
      requestBody:
        content:
          mutipart/form-data:
            schema:
              type: object
              properties:
                eld-file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: 'Successful operation. An email will be sent to the system’s configured
                        email address, informing whether or not the request was successful,
                        along with error messages if it wasn’t.'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/fmcsa/ftp:
    post:
      tags:
      - fmcsaWebService
      operationId: fmcsaFtp
      summary: 'Allows Drivers to send ELD data in a multipart POST request containing a single CSV
                file with the ELD data inside it. The file will be sent to the server,
                encrypted and then sent via FTP to the FMCSA enforcement personnel for decryption
                and verification.'
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/eldIdentifierParam"
      - $ref: "#/components/parameters/eldRegistrationIdParam"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                eld-file:
                  type: string
                  format: binary
      responses:
        200:
          description: Successful Response
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/myUser:
    get:
      tags:
        - myuser
      summary: "This API returns the details of the currently logged in User."
      operationId: getMyUsers
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      responses:
        200:
          description: 'Successful operation.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/driverViolations/{recordIds}:
    get:
      tags:
        - driverViolations
      summary: 'Driver Violations are recorded instances wherein the Driver has committed Driving, Shift, or Cycle Violations. Whenever a Driver has exceeded the maximum time allowed for an OnDuty or a Driving status within a given time period or a series of time periods, these Driver Violations are recorded.'
      operationId: driverViolations
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdsParam"
        - $ref: "#/components/parameters/userIdParam"
        - $ref: "#/components/parameters/driverHistoryIdParam"
        - $ref: "#/components/parameters/terminalIdParam"
        - $ref: "#/components/parameters/subsetIdArrayParam"
        - $ref: "#/components/parameters/violationNameParam"
        - $ref: "#/components/parameters/fromTimestampParam"
        - $ref: "#/components/parameters/toTimestampParam"
        - $ref: "#/components/parameters/fromChangeTimestampParam"
        - $ref: "#/components/parameters/toChangeTimestampParam"
        - $ref: "#/components/parameters/systemParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/driverAliasArrayParam"
        - name: sort
          in: query
          description: |
            Sort order:
              * `id` – Sort records by their id field in ascending order (DEFAULT)
              * '-id' – Sort records by their id field in descending order
              * 'timestamp' – Sort records by their timestamp field in ascending order
              * '-timestamp' – Sort records by their timestamp field in descending order
              * 'last-changed-date' – Sort records by their last change date field in ascending order
              * '-last-changed-date' – Sort records by their last change date field in descending order
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverViolation'
      security:
      - BasicAuth: [ ]
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/reports/{recordIds}:
    get:
      tags:
      - reports
      summary: Get  Available Reports
      description: 'This API returns the available Reports, the export type and details for the parameters needed to generate and export each Report.'
      operationId: getReports
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Report'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/permissions/{recordIds}:
    get:
      tags:
      - Permissions
      summary: Permissions per role
      description: 'The Permissions endpoint is a read-only API that shows all Permissions that can be included in a User Role. The Permissions API is used for creating a User role and is shown on the Users API based on the User Roles that have been assigned to the User.'
      operationId: getPermissions
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/nameParam"
      - $ref: "#/components/parameters/offsetParam"
      - $ref: "#/components/parameters/limitParam"
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `name` – Sort records by their name field in ascending order
            * `-name` – Sort records by their name field in descending order
            * `display-name` – Sort records by their display name field in ascending order
            * `-display-name` – Sort records by their display name field in descending order
            * `category` – Sort records by their category field in ascending order
            * `-category` – Sort records by their category field in descending order
            * `system` – Sort records by their system field in ascending order
            * `-system` – Sort records by their system field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Permission'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/myAccount:
    get:
      tags:
        - myAccount
      summary: This API returns Account details of the currently logged in User.
      operationId: getMyAccount
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
      security:
        - BasicAuth: []
        - OAuth2: []
  /api/v2/myProduct:
      get:
        tags:
          - myproduct
        summary: "This API returns the Product details of the current Account."
        operationId: getMyProduct
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        responses:
          200:
            description: 'Successful operation.'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MyProduct'
        security:
          - BasicAuth: []
          - OAuth2: []
  /branding/applicationLogo:
      get:
        tags:
          - Get Header or Footer logo
        summary: Get the vistracks header and footer logo
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
          - in: query
            name: image
            required: true
            schema:
              type: string
              enum:
                - header
                - footer
            description: Specify whether to return the header or footer image
          - in: query
            name: useDefault
            required: true
            schema:
              type: boolean
            description: Use the default image
        responses:
          200:
            description: successful operation returns an image
            content:
              image/*:
                schema:
                  type: string
                  format: binary
  /api/v2/logo/application/header:
      post:
        tags:
          - Header Logo
        summary: Post a new Header logo for an account
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        requestBody:
          description: An image
          content:
            image/*:
              schema:
                type: string
                format: binary
        responses:
          200:
            description: successful operation
      put:
        tags:
          - Header Logo
        summary: Update a Header logo for an account
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        requestBody:
          description: An image
          content:
            image/*:
              schema:
                type: string
                format: binary
        responses:
          200:
            description: successful operation
      delete:
        tags:
          - Header Logo
        summary: Delete a header logo
        responses:
          200:
            description: delete success
  /api/v2/logo/application/footer:
      post:
        tags:
          - Footer Logo
        summary: Post a new footer logo for an account
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        requestBody:
          description: A footer logo image
          content:
            image/*:
              schema:
                type: string
                format: binary
        responses:
          200:
            description: successful operation
      put:
        tags:
          - Footer Logo
        summary: Post a new footer logo for an account
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        requestBody:
          description: A footer logo image
          content:
            image/*:
              schema:
                type: string
                format: binary
        responses:
          200:
            description: successful operation
      delete:
        tags:
          - Footer Logo
        summary: Delete a footer logo
        responses:
          200:
            description: delete success
  /branding/reportLogo:
      get:
        tags:
          - Report Logos
        summary: Get the vistracks report Logo
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        responses:
          200:
            description: successful operation
            content:
              image/*:
                schema:
                  type: string
                  format: binary
  /branding/reportLogoSmall:
      get:
        tags:
          - Report Logos Small
        summary: Get the small vistracks report Logo
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        responses:
          200:
            description: successful
            content:
              image/*:
                schema:
                  type: string
                  format: binary
  /api/v2/logo/report:
      post:
        tags:
          - Report Logos
        summary: post a new report logo
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        requestBody:
          description: An image of the logo
          content:
            image/*:
              schema:
                type: string
                format: binary
        responses:
          200:
            description: successful operation
      put:
        tags:
          - Report Logos
        summary: Update a report logo
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        requestBody:
          description: Upload an image
          content:
            image/*:
              schema:
                type: string
                format: binary
        responses:
          200:
            description: successful operation
      delete:
        tags:
          - Report Logos
        summary: Delete a report logo
        responses:
          200:
            description: delete success
  /api/v2/logo/report/small:
      post:
        tags:
          - Report Logos Small
        summary: post a new small report logo
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        requestBody:
          description: upload an image
          content:
            image/*:
              schema:
                type: string
                format: binary
        responses:
          200:
            description: successful operation
      put:
        tags:
          - Report Logos Small
        summary: update a small report logo
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        requestBody:
          description: upload the image
          content:
            image/*:
              schema:
                type: string
                format: binary
        responses:
          200:
            description: successful operation
      delete:
        tags:
          - Report Logos Small
        summary: Delete a report logo
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
        responses:
          200:
            description: delete success
  /api/v2/products/{recordIds}:
      get:
        tags:
          - products
        summary: 'Products are the different variants of the Hours of Service platform. They are likened to
        packages or set-ups a definite set of modules inside an Account. A single Account may have more
        than one Product and can resell multiple Products, thus allowing its sub.accounts access to the
        module components, depending on their Products. With the use of Products, only necessary components
        are installed on an Account instead of all the Hours of Service modules.'
        operationId: getProducts
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
          - $ref: "#/components/parameters/recordIdsParam"
          - $ref: "#/components/parameters/nameParam"
          - $ref: "#/components/parameters/limitParam"
          - $ref: "#/components/parameters/offsetParam"
          - in: query
            name: sort
            required: false
            description: >
              Sort: order
                * `id` – Sort records by their id field in ascending order (DEFAULT)
                * `-id` – Sort records by their id field in descending order
                * `name` – Sort records by their name field in ascending order
                * `-name` – Sort records by their name field in descending order
            schema:
              type: string
        responses:
          200:
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'
        security:
          - BasicAuth: []
          - OAuth2: []
  /api/v2/changePassword:
      put:
        tags:
          - changePassword
        summary: Change password
        description: 'This API allows an authenticated User to update his/her password by providing Base64-encoded parameters of the old and the new password. This returns an empty response with a status code of 200 when successful and returns an error message if unsuccessful.'
        operationId: changePassword
        parameters:
          - $ref: "#/components/parameters/accountUuidHeader"
          - $ref: "#/components/parameters/currentPwdTokenParam"
          - $ref: "#/components/parameters/newPwdTokenParam"
        responses:
          200:
            description: successful operation
            content:
              text/plain:
                schema:
                  type: string
        security:
          - BasicAuth: []
          - OAuth2: []
  /api/v2/userRoles/{recordIds}:
    get:
      tags:
        - userRoles
      summary: The User Roles API offer a set of customizable and predefined roles that can be assigned
        to Users/Drivers. A User Role contains Permissions that indicates the actions the User is allowed
        to do. The User’s accessible services are dependent on the User Role and checked against the Permissions
        that are assigned under them in the system.
      operationId: getUserRoles
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdsParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - name: sort
          in: query
          description: |
            Sort: order
              * `id` – Sort records by their id field in ascending order (DEFAULT)
              * `-id` – Sort records by their id field in descending order
              * `name` – Sort records by their name field in ascending order
              * `-name` – Sort records by their name field in descending order
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRole'
      security:
        - BasicAuth: []
        - OAuth2: []
    delete:
      tags:
        - userRoles
      summary: Deletes an user role.
      description: Can produce a, Can’t delete default User role error, because
        User cannot update a default User Role.
      operationId: deleteUserRoles
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRole'
      security:
        - BasicAuth: []
        - OAuth2: []
  /api/v2/userRoles:
    put:
      tags:
        - userRoles
      summary: Update an user role.
      description: |
        Can produce the following errors

        * Permission <permission name> does not exists
          PUT error because the Permission does not exist in the Account.
        * User cannot update User role that contains: <permission name>
          PUT error because the current User is not allowed to create or update a User Role
          with one of the Permissions.
        * A User role with the given id was not found
          PUT error because id was not found in the Account
        * Can’t modify default User role <User role name>
          PUT error because User cannot update a default User Role
      operationId: updateUserRoles
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The user role record to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
        - userRoles
      summary: Creates a user role.
      description: |
        Can produce the following errors

        * The new User role to insert should not have an id.
          POST error because request must not contain an id
        * Permission <permission name> does not exists
          POST error because the Permission does not exist in the Account.
        * User cannot create User role that contains: <permission name>
          POST error because the current User is not allowed to create or update a User Role
          with one of the Permissions.
      operationId: createUserRoles
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The user role to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRole'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/driverCalcs/{recordIds}:
    get:
      tags:
        - driverCalcs
      summary: Driver Calcs provide the records of calculations conducted to determine a whether a Driver
        has committed a Driver Violation or not. The information within Driver Calcs includes the Driver,
        the associated Driver History record from which the calculation is based upon, and the timestamps
        pertaining to the Driver’s on duty shift.
      operationId: getDriverCalc
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdsParam"
        - $ref: "#/components/parameters/userIdArrayParam"
        - $ref: "#/components/parameters/driverHistoryIdParam"
        - $ref: "#/components/parameters/driverHistoryFromEventTimeParam"
        - $ref: "#/components/parameters/driverHistoryToEventTimeParam"
        - $ref: "#/components/parameters/fromChangeTimestampParam"
        - $ref: "#/components/parameters/toChangeTimestampParam"
        - $ref: "#/components/parameters/driverAliasArrayParam"
        - name: sort
          in: query
          description: |
            Sort: order
              * `id` – Sort records by their id field in ascending order (DEFAULT)
              * `-id` – Sort records by their id field in descending order
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverCalc'
      security:
        - BasicAuth: []
        - OAuth2: []
    delete:
      tags:
        - driverCalcs
      summary: Deletes a driver calc record.
      operationId: deleteDriverCalc
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverCalc'
      security:
        - BasicAuth: []
        - OAuth2: []
  /api/v2/driverCalcs/:
    put:
      tags:
        - driverCalcs
      summary: Update a driver calc record
      operationId: updateDriverCalc
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The driver calc record to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverCalc'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverCalc'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
        - driverCalcs
      summary: Creates a new driver calc.
      operationId: createDriverCalc
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: The driver calc record to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DriverCalc'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriverCalc'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/terminals/{recordIds}:
    get:
      tags:
      - terminals
      operationId: getTerminals
      summary: |
        The Terminals endpoint contains a list of the locations for the motor carrier’s Terminals.
        It is used to filter results on the portal, e.g. to show all Drivers or Equipment assigned
        under a particular Terminal.  Both the Drivers and Equipment APIs have a foreign key
        relationship with Terminals API.
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/uuidParam"
      - $ref: "#/components/parameters/nameParam"
      - $ref: "#/components/parameters/terminalCodeParam"
      - $ref: "#/components/parameters/fromDeletedAtParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - in: query
        name: sort
        required: false
        description: |
          Sort: order
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `name` – Sort records by their name field in ascending order
            * `-name` – Sort records by their name field in descending order
        schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Terminal'
      security:
      - BasicAuth: []
      - OAuth2: []
    delete:
      tags:
      - terminals
      summary: 'Drivers assigned under the deleted Terminal are moved to the default main office Terminal.
        Delete for the Terminals API is implemented using a soft-delete.
        This prevents SQL’s Cascade Delete from deleting any driving records associated with a deleted
        Terminal.  Eventually, following the motor carrier’s data retention policy, the soft-delete will
        become a hard-delete.'
      operationId: deleteTerminal
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdParam"
      - $ref: "#/components/parameters/uuidParam"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Terminal'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/terminals/:
    post:
      tags:
      - terminals
      summary: Create one or more Terminals
      operationId: createTerminals
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Terminal'
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Terminal'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    put:
      tags:
      - terminals
      summary: Update one or more terminals
      operationId: updateTerminals
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Terminal'
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Terminal'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/terminals/meta/nearest:
    get:
      tags:
        - terminals
      summary: Single Nearest Terminal
      operationId: getNearestTerminal
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: '#/components/parameters/latitudeParam'
      - $ref: '#/components/parameters/longitudeParam'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NearestTerminal'
      security:
        - BasicAuth: []
        - OAuth2: []
    post:
      tags:
      - terminals
      summary: Multiple Nearest Terminals
      operationId: postMultipleNearestTerminals
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/NearestTerminalCorrelationRequest'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NearestTerminalCorrelation'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/subsets/{recordIds}:
    get:
      tags:
        - subsets
      summary: The Subsets endpoint contains a list of sub categories under a specific Terminal. It is used to filter Driver
        Statuses and Driver Violation results on the portal assigned under a particular Subset of that Terminal.
        The Driver APIs have a foreign key relationship with Subsets API.
      operationId: getSubsets
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdsParam"
        - $ref: "#/components/parameters/nameParam"
        - $ref: "#/components/parameters/terminalIdArrayParam"
        - $ref: "#/components/parameters/isDefaultParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - in: query
          name: sort
          required: false
          description: >
            Sort: order
              * `id` – Sort records by their id field in ascending order (DEFAULT)
              * `-id` – Sort records by their id field in descending order
              * `name` – Sort records by their name field in ascending order
              * `-name` – Sort records by their name field in descending order
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subset'
      security:
        - BasicAuth: []
        - OAuth2: []
    delete:
      tags:
        - subsets
      summary: Deletes a subset record.
      operationId: deleteSubset
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subset'
      security:
        - BasicAuth: []
        - OAuth2: []
  /api/v2/subsets/:
    put:
      tags:
        - subsets
      summary: Update one or more subsets.
      operationId: updateSubsets
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: One or more account subsets to update.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Subset'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subset'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
    post:
      tags:
        - subsets
      summary: Create one or more subsets.
      operationId: createSubsets
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: One or more subsets to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Subset'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subset'
      security:
        - BasicAuth: []
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/media/{recordIds}:
    get:
      tags:
        - media
      summary: The Media API is used to get different media files that have been uploaded to the server. This API is utilized by other API’s POST methods such as Driver Daily Documents PDF files and Work Order image files. This API supports GET method to retrieve the files.
      operationId: getMedia
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdsParam"
      responses:
        200:
          description: Returns the uploaded Media. If the id provided is not valid, the API returns a blank screen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mediaIdArrayParam'
      security:
        - BasicAuth: [ ]
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/ccmta/multipleSubmit:
    post:
      tags:
      - ccmtaWebService
      operationId: ccmtaMultipleSubmit
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: Request for multiple ccmta submit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CcmtaMultiRequest'
      responses:
        200:
          description: Successful Response
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/ccmta/email:
    post:
      tags:
      - ccmtaWebService
      operationId: ccmtaEmail
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/eldIdentifierParam"
      - $ref: "#/components/parameters/eldRegistrationIdParam"
      - $ref: "#/components/parameters/emailMessageParam"
      - $ref: "#/components/parameters/recipientParam"
      - $ref: "#/components/parameters/subjectParam"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                eld-file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Successful Response
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/smtpConfiguration:
    post:
      tags:
        - SmtpConfiguration
      operationId: createSmtpConfiguration
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmtpConfiguration'
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmtpConfiguration'
      security:
        - BasicAuth: [ ]
        - OAuth2: []
      x-codegen-request-body-name: body
    get:
      tags:
        - SmtpConfiguration
      summary: "The SMTP Configuration API allows you to set an Account’s SMTP connection settings which includes the custom URL, username and password and the port number that the Account will use when sending emails."
      operationId: getSmtpConfiguration
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmtpConfiguration'
      security:
        - BasicAuth: [ ]
        - OAuth2: []
      x-codegen-request-body-name: body
    put:
      tags:
        - SmtpConfiguration
      summary: "The SMTP Configuration API allows you to set an Account’s SMTP connection settings which includes the custom URL, username and password and the port number that the Account will use when sending emails."
      operationId: updateSmtpConfiguration
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmtpConfiguration'
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmtpConfiguration'
      security:
        - BasicAuth: [ ]
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/smtpConfiguration/{recordIds}:
    delete:
      tags:
        - SmtpConfiguration
      summary: "The SMTP Configuration API allows you to set an Account’s SMTP connection settings which includes the custom URL, username and password and the port number that the Account will use when sending emails."
      operationId: deleteSmtpConfiguration
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: 'Successful operation.'
      security:
        - BasicAuth: [ ]
        - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/vbusData/{recordIds}:
    get:
      tags:
      - VBusData
      summary: VBUS Data is data collected from a Vehicle’s engine bus and is associated with the Asset record of the Vehicle. These values that have values are as they are reported by the Vehicle Bus. Reporting of values are dependent on both the Vehicle make and model, as well as the reporting VBUS Device. Most Vehicles and Devices do not report all parameters listed.
      operationId: getvBusData
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/userIdParam"
      - $ref: "#/components/parameters/assetIdParam"
      - $ref: "#/components/parameters/driverHistoryIdParam"
      - $ref: "#/components/parameters/fromTimestampParam"
      - $ref: "#/components/parameters/toTimestampParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - name: sort
        in: query
        description: |
          Sort: order
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `user-id` – Sort records by their userId field in ascending order
            * `-user-id` – Sort records by their userId field in descending order
            * `asset-id` – Sort records by their assetId field in ascending order
            * `-asset-id` – Sort records by their assetId field in descending order
            * `timestamp` – Sort records by their timestamp in ascending order
            * `-timestamp` –  Sort records by their timestamp field in descending order
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VBusData'
      security:
      - BasicAuth: []
      - OAuth2: []
    delete:
      tags:
        - VBusData
      summary: Delete vBus data
      operationId: deletevBusData
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VBusData'
      security:
        - BasicAuth: []
        - OAuth2: []
  /api/v2/vbusData/:
    post:
      tags:
      - VBusData
      operationId: createvBusData
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: One or more Vbus to create.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VBusData'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VBusData'
      security:
      - BasicAuth: []
      - OAuth2: []
    put:
      tags:
      - VBusData
      operationId: modifyvBusData
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        description: Specify one or more Vbus to modify.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VBusData'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VBusData'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/visibilitySets/{recordIds}:
    get:
      tags:
      - visibilitySets
      summary: Visibility Sets control who can see which resources. Assets and Users have Visibility Sets.
        Users can only create or modify Assets with at least one matching Visibility Set.
        The default set of a fresh Account is “Visibility Set1” but this can be changed to another set.
        Inversely, a User can have multiple Visibility Sets, granting visibility to all Assets that
        include any of those sets.
      operationId: getVisibilitySets
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/nameParam"
      - $ref: "#/components/parameters/recordIdsParam"
      - $ref: "#/components/parameters/limitParam"
      - $ref: "#/components/parameters/offsetParam"
      - name: sort
        in: query
        description: |
          Sort order:
            * `id` – Sort records by their id field in ascending order (DEFAULT)
            * `-id` – Sort records by their id field in descending order
            * `name` – Sort records by their name field in ascending order
            * `-name` – Sort records by their name field in descending order
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VisibilitySet'
      security:
      - BasicAuth: []
      - OAuth2: []
    delete:
      tags:
      - visibilitySets
      summary: delete
      operationId: deleteVisibilitySets
      parameters:
      - $ref: "#/components/parameters/accountUuidHeader"
      - $ref: "#/components/parameters/recordIdParam"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VisibilitySet'
      security:
      - BasicAuth: []
      - OAuth2: []
  /api/v2/visibilitySets:
    post:
      tags:
      - visibilitySets
      summary: create
      operationId: createVisibilitySets
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VisibilitySet'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VisibilitySet'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
    put:
      tags:
      - visibilitySets
      summary: update
      operationId: updateVisibilitySets
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VisibilitySet'
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VisibilitySet'
      security:
      - BasicAuth: []
      - OAuth2: []
      x-codegen-request-body-name: body
  /api/v2/driverHistories/meta/driversWhoHaveDrivenVehicle:
    get:
      tags:
      - driversWhoHaveDrivenVehicle
      summary: Get drivers who have driven the specified vehicle in the selected range date.
      operationId: getDriversWhoHaveDriven
      parameters:
        - $ref: "#/components/parameters/accountUuidHeader"
        - $ref: "#/components/parameters/assetIdParam"
        - $ref: "#/components/parameters/fromEventTimeParam"
        - $ref: "#/components/parameters/toEventTimeParam"
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DriversHaveDriven'
      security:
      - BasicAuth: []
      - OAuth2: []

components:
  schemas:
    AccountProperty:
      required:
      - name
      - value
      type: object
      properties:
        id:
          type: integer
          description: Auto generated. Unique Identifier.
          format: int64
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        name:
          type: string
          description: The name of the Account Property.
        value:
          type: string
          description: The value of the Account Property.
        isSystem:
          type: boolean
          description: Indicates if the Account Property is a system property or not.
            Only Users with a Permission of PERM_IS_VT_ADMIN can read, create and
            update system properties.
        isParent:
          type: boolean
          description: Indicates if the Account Property is from the current Account
            or inherited from a parent Account’s Account Property.
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
      description: Account Properties are unique branding details for an Account.
        This is a collection settings that control some functionalities. Changing
        an Account Property may also affect the same Account Property of its sub accounts
        that has not done any overrides to the Account Property. Once a sub-account
        has done an edit to an Account Property, this will create an override and
        will no longer be dependent on the parent Account. By default, a User who
        does not have a Permission of PERM_IS_VT_ADMIN cannot retrieve system Account
        Properties in an unqualified GET. System Account Properties can only be accessed
        if their exact name is specified.
    Account:
      type: object
      properties:
        id:
          type: integer
          description: Auto generated. Unique identifier.
          format: int64
        accountToken:
          type: string
          description: Unique string identifier used to login from a specific Account.
        activeDriversCount:
          type: integer
          description: Auto populated. Indicates the number of active Drivers (excluding
            system drivers) in an Account. This field only appears on the accounts/meta/tree
            endpoint.
          format: int32
        activeVehiclesCount:
          type: integer
          description: Auto populated. Indicates the number of active Vehicles in
            an Account. This field only appears on the accounts/meta/tree endpoint.
          format: int32
        administrativeUser:
          $ref: '#/components/schemas/AdministrativeUser'
        allowSubAccountBranding:
          type: boolean
          description: 'Indicates if the Account allows sub account branding or not.
            Note: Can only be viewed and changed by Users with the PERM_IS_ACCOUNT_ADMIN
            permission.'
        canCreateReseller:
          type: boolean
          description: 'Indicates if the Account can create other reseller Accounts
            or not. Note: Can only be viewed and changed by Hours of Service administrators.'
        carrierInformation:
          $ref: '#/components/schemas/CarrierInformation'
        deactivated:
          type: boolean
          description: Indicates if the Account has been deactivated or not. Deactivating
            an account will automatically deactivate its sub accounts.
        domainName:
          type: string
          description: Contains an Account’s custom domain name. This is not returned
            on GET for Accounts that don’t have one.
        features:
          $ref: '#/components/schemas/AccountFeatures'
        isBillable:
          type: boolean
          description: 'Indicates if the Account is billable or not. Note: Can only
            be viewed and changed by Hours of Service administrators'
        isGoodStanding:
          type: boolean
          description: Indicates if the Account is in good standing or not.
        isReseller:
          type: boolean
          description: 'Indicates if the Account is a reseller or not. Note: Can only
            be viewed and changed by Hours of Service administrators or if the current
            User belongs to an Account that has “canCreateReseller” field set to true.'
        name:
          type: string
          description: The name of the account.
        productIds:
          type: array
          description: The ids of the Product(s) enabled in the Account.
          items:
            type: integer
            format: int64
        resellableProducts:
          type: array
          description: The ids of the Product(s) that an Account can resell to its
            own sub-accounts.
          items:
            $ref: '#/components/schemas/Identifiable'
        subAccounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        uuid:
          type: string
          format: uuid
          description: Unique identifier
    AccountOnBoarding:
      required:
        - name
        - uuid
      type: object
      properties:
        name:
          type: string
          description: Unique name for the account.
        uuid:
          type: string
          format: uuid
          description: Account unique identifier
    Hos3AccountOnBoarding:
      type: object
      required:
        - operationalUnitUuid
      properties:
        operationalUnitUuid:
          type: string
          format: uuid
          description: uuid of the operational unit
        terminalUuid:
          type: string
          format: uuid
          description: uuid of the terminal associated with the account (optional)
        carrierUuid:
          type: string
          format: uuid
          description: uuid of the carrier associated with the account (optional)
        driverSettings:
          $ref: '#/components/schemas/Driver'
    Hos3DriverOnBoarding:
      type: object
      required:
        - driverUuid
      properties:
        driverUuid:
          type: string
          format: uuid
          description: uuid of the driver
        terminalUuid:
          type: string
          format: uuid
          description: uuid of the terminal associated with the driver (optional)
        carrierUuid:
          type: string
          format: uuid
          description: uuid of the carrier associated with the driver (optional)
        driverSettings:
          $ref: '#/components/schemas/Driver'
    Hos3OperationalUnit:
      type: object
      required:
        - uuid
        - businessAccountUuid
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the operational unit
        businessAccountUuid:
          type: string
          format: uuid
          description: uuid of the account
        parentUuid:
          type: string
          format: uuid
          description: uuid of the parent
        customId:
          type: string
          description: the custom identifier
        description:
          type: string
          description: the description
        deleted:
          type: boolean
          description: the soft deleted flag
    Hos3OperationalUnitDriver:
      type: object
      required:
        - operationalUnitUuid
        - driverUuid
      properties:
        operationalUnitUuid:
          type: string
          format: uuid
          description: uuid of the operational unit
        driverUuid:
          type: string
          format: uuid
          description: uuid of the driver
        driverId:
          type: integer
          format: int64
          description: the identifier of the driver
    Hos3OperationalUnitTree:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the operational unit
        businessAccountUuid:
          type: string
          format: uuid
          description: uuid of the account
        parentUuid:
          type: string
          format: uuid
          description: uuid of the parent
        customId:
          type: string
          description: the custom identifier
        description:
          type: string
          description: the description
        deleted:
          type: boolean
          description: the soft deleted flag
        children:
          type: array
          items:
            $ref: '#/components/schemas/Hos3OperationalUnitTree'
    AlertNotification:
      required:
      - details
      - driverName
      - notificationType
      - timestamp
      type: object
      properties:
        details:
          type: string
          description: Details of the event that triggered the Aert Notification
        driverName:
          type: string
          description: The name of the Driver that triggered the Alert Notification
        notificationType:
          $ref: '#/components/schemas/AlertNotificationType'
        timestamp:
          type: string
          description: 'Indicates the date and time as to when the Alert Notification
            was triggered.Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ,
            e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
    AlertNotificationType:
      type: string
      enum:
      - DOCUMENT_SAVED
      - DVIR_DEFECTS
      - DVIR_FAILURE
      - PRE_TRIP_DVIR
      - VIOLATION
      - NEXT_VIOLATION_WARNING
      - BREAK_VIOLATION_WARNING
      - CYCLE_VIOLATION_WARNING
      - DRIVING_VIOLATION_WARNING
      - SHIFT_VIOLATION_WARNING
      - UNIDENTIFIED_DRIVER
      - PENDING_EDIT_REQUEST_CHANGED
    Identifiable:
      type: object
      properties:
        id:
          type: integer
          format: int64
    AdministrativeUser:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
          format: password
        suffix:
          type: string
        isVerified:
          type: boolean
    CarrierInformation:
      type: object
      properties:
        carrierName:
          type: string
        carrierDotNumber:
          type: string
        street:
          type: string
          description: Street address, example '123 Main St.'
        city:
          type: string
        state:
          type: string
        country:
          type: string
        zip:
          type: string
        phoneNumber:
          type: string
        timezone:
          type: string
        startTimeOfDay:
          type: string
    AccountFeatures:
      type: object
      properties:
        ifta:
          type: boolean
          description: When set to true, this enables the Portal’s State Mileage Menu.
        map:
          type: boolean
          description: When set to true, this enables the Portal’s Locations Page.
        eld:
          type: boolean
          description: When set to true, this enables the Portal’s Hours of Service
            Menu.
        dvir:
          type: boolean
          description: When set to true, this enables the Portal’s DVIR Menu.
        workOrder:
          type: boolean
          description: When set to true, this enables the Portal’s Mobile Worker Menu
            in the Portal.
        complianceSupportCenter:
          type: boolean
          description: When set to true, this means that drivers under the account
            can contact the compliance support agents.
    Asset:
      type: object
      required:
        - assetType
        - name
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        assetType:
          $ref: "#/components/schemas/AssetType"
        active:
          type: boolean
          description: Indicates if the current asset is active or inactive.
        createdDate:
          type: string
          description: 'Auto-generated timestamp of the date and time this record was created.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        deactivatedAt:
          type: string
          description: 'Indicates the date and time when the asset was deactivated.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z).'
          format: date-time
        deletedAt:
          type: string
          description: 'Indicates the date and time when the asset was soft-deleted.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z).
            This is not returned for Assets that have not been soft-deleted.'
          format: date-time
        eldConnectionType:
          type: string
          description: The connection type of the device paired with this Asset.
        eldDevice:
          type: string
          description: The device type paired with this Asset.
        eldDeviceDescription:
          type: string
          description: The description of the device paired with this Asset.
        eldDeviceManufacturer:
          type: string
          description: The manufacturer of the device paired with this Asset.
        eldDeviceName:
          type: string
          description: The name of the device paired with this Asset.
        eldEsn:
          type: integer
          description: The ELD ESN for the CalAmp device paired with this Asset.
          format: int64
        eldMacAddress:
          type: string
          description: The MAC address of the device paired with this Asset.
        eldPassword:
          type: string
          description: The password of the device paired with this Asset.
        eldPin:
          type: string
          description: The PIN of the device paired with this Asset.
        eldWifiApPassword:
          type: string
          description: The WiFI AP password of the device paired with this Asset.
        eldWifiApSsid:
          type: string
          description: The WiFi AP SSID of the device paired with this Asset.
        eldWifiSsid:
          type: string
          description: The WiFi SSID of the device paired with this Asset.
        externalId:
          type: string
          description: Optional unique identifier for Asset.
        fields:
          type: array
          description: 'A collection of fields containing information of the device paired with this Asset.
            Note: This is a legacy property and will be removed on future releases. Use the properties prefixed with "eld" instead.'
          items:
            $ref: '#/components/schemas/Field'
        firmwareVersion:
          type: string
          description: The firmware version of the device paired to this Asset.
        formIds:
          type: array
          description: The ids of the default DVIR Forms associated with the Asset.
          items:
            type: integer
            format: int64
        gpsSource:
          $ref: '#/components/schemas/GpsSource'
        hasBerth:
          type: boolean
          description: Sleeper berth available.
        homeTerminalId:
          type: integer
          description:  The id of the Terminal under which this Asset belongs to.
            If not provided in the JSON POST or PUT, automatically assigns the authenticated Driver’s
            homeTerminalId or the Main Office Terminal if not available
          format: int64
        id:
          type: integer
          description: Auto generated. Unique identifier
          format: int64
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        licensePlate:
          type: string
          description: The license plate of this Asset.
        licensePlateState:
          type: string
          description: |
            The state of the license plate of this Asset. Can either be one of the following state codes:

              * USA: AL, AK, AR, AZ, CA, CO, CT, DC, DE, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY
              * USA Protectorates: AS, DC, GU, MP, PR, VI
              * Canada: AB, BC, MB, NB, NF, NS, NT, ON, PE, QC, SK, YT
              * Mexico: MEX_AG, MEX_BN, MEX_BS, MEX_CH, MEX_CI, MEX_CL, MEX_CP, MEX_CS, MEX_DF, MEX_DG, MEX_GE, MEX_GJ, MEX_HD, MEX_JA, MEX_MC, MEX_MR, MEX_MX, MEX_NA, MEX_NL, MEX_OA, MEX_PU, MEX_QE, MEX_QI, MEX_SI, MEX_SL, MEX_SO, MEX_TA, MEX_TB, MEX_TL, MEX_VC, MEX_YU, MEX_ZA
        name:
          type: string
          description: The name of Asset as displayed in the user interface.
        odometerOffsetKm:
          type: number
          description: Value of the odometer offset of this Asset in kilometers.
          format: double
        regulationMode:
          $ref: '#/components/schemas/RegulationMode'
        useGpsOdometer:
          type: boolean
          description: Indicates if this Asset uses GPS Odometer or not.
        useManualEngineHours:
          type: boolean
          description: Indicates if this Asset uses manual engine hours or not.
        vbusConnectionRequired:
          type: boolean
          description: If set to true, driver is required to connect to a VBUS device before he can go driving.
        vin:
          type: string
          description: The VIN of this Asset. This must be valid VIN.
        visibilitySetIds:
          type: array
          items:
            type: integer
            format: int64
          description: Contains a list of IDs of the Visibility Sets that this Asset is included in.
        uuid:
          type: string
          format: uuid
          description: Unique identifier
      description: Assets refers to the collection of Vehicles and Trailers owned by an Account.
        An Asset is paired with a given ELD device capable of periodically reporting back its position
        and possibly other characteristics of the vehicle. Assets can be associated with Driver Histories,
        Asset Statuses, etc. containing information that the device and the HOS application has reported back to the Hours of Service servers.
    AssetStatus:
      type: object
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        assetId:
          type: integer
          description: The id of the Asset that is tied to this status.
          format: int64
        eventTime:
          type: string
          description: 'Indicates when the last event occurred for this Asset. Note:
            Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        id:
          type: integer
          description: Auto generated. Unique identifier
          format: int64
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        latitude:
          type: number
          description: Indicates the latitude coordinate of the location where the
            Asset was last tracked.
          format: double
        location:
          type: string
          description: Contains the address of the location where the Asset was last
            tracked.
        longitude:
          type: number
          description: Indicates the longitude coordinate of the location where the
            Asset was last tracked.
          format: double
        position:
          type: string
          description: The pair of coordinates indicating the location where the Asset
            was last tracked.
        totalEngineHours:
          type: string
          description: The number of hours the engine of this Asset has been running
            when it was last tracked.
        totalOdometerKm:
          type: number
          description: The odometer of the Asset in kilometers at the time when it
            was last tracked.
          format: double
        userId:
          type: integer
          description: The id of the Driver that is tied to this status.
          format: int64
        driverAlias:
          type: string
          description: The id of the Driver(alias) that is tied to this status.
      description: The Asset Status is a read-only API that provides near real-time
        information from the most recent communication between the mobile devices
        of the Drivers and Hours of Service servers for the status of an Asset. It
        is used to update the position of the Asset (and the Driver using it) on a
        map that can be seen in the Portal’s Locations tab.
    DriverStatus:
      required:
      - assetId
      - eventType
      type: object
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        alertNotificationSent:
          type: boolean
          description: 'TODO: fix me'
        assetId:
          type: integer
          description: The id of the Vehicle that the Driver used to perform the last
            Status change
          format: int64
        availableBreak:
          type: string
          description: 'Indicates the remaining time until the driver has to take
            a 30-minute break. Note: Must be in seconds Duration format (PT##S). Where
            ## is the number of seconds (see examples)'
        availableCycle:
          type: string
          description: 'Indicates the remaining time until the driver has to take
            a Cycle Reset. Note: Must be in seconds Duration format (PT##S). Where
            ## is the number of seconds (see examples)'
        availableDrive:
          type: string
          description: 'Indicates the remaining time until the driver has to take
            a stop driving. Note: Must be in seconds Duration format (PT##S). Where
            ## is the number of seconds (see examples)'
        availableShift:
          type: string
          description: 'Indicates the remaining time until the driver has to take
            a Shift Reset. Note: Must be in seconds Duration format (PT##S). Where
            ## is the number of seconds (see examples)'
        engineHours:
          type: string
          description: 'Indicates the number of hours that the engine of the associated
            vehicle has been running. Note: Must be in seconds Duration format (PT##S).
            Where ## is the number of seconds (see examples)'
        errorCode:
          type: integer
          description: Auto generated. Returns an error code in the response JSON
            for a failing Driver Status update
          format: int32
        errorMessage:
          type: string
          description: Auto generated. Returns an error message in the response JSON
            for a failing Driver Status update
        eventTime:
          type: string
          description: 'Indicates the date and time when the last change in status
            occurred. Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ,
            e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        eventType:
          $ref: '#/components/schemas/EventType'
        fuelLevel:
          maximum: 1E+2
          minimum: 0
          type: number
          format: double
        gainTimeHowMuch:
          type: string
          description: 'Indicates the amount of time the associated User will gain.
            Note: Must be in seconds Duration format (PT##S). Where ## is the number
            of seconds (see examples)'
        gainTimeHowMuchNextDay:
          type: string
          description: 'Indicates the amount of time the associated User will gain
            for the next day. Note: Must be in seconds Duration format (PT##S). Where
            ## is the number of seconds (see examples)'
        gainTimeWhen:
          type: string
          description: 'Indicates when the associated User will gain time. Note: Format
            is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        gainTimeWhich:
          type: string
          description: Indicates the type of time that the associated User will gain
        gpsSource:
          $ref: '#/components/schemas/GpsSource'
        heading:
          maximum: 3.6E+2
          minimum: 0
          type: integer
          description: Indicates the heading in degrees during the last known Status
            of the associated Driver
          format: int32
        hoursUntil30MinuteBreak:
          type: string
          description: 'Indicates the number of hours until the driver''s next 30
            minute break. Note: Must be in seconds Duration format (PT##S). Where
            ## is the number of seconds (see examples)'
        id:
          type: integer
          description: Auto generated. Unique identifier
          format: int64
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        latitude:
          type: number
          description: Indicates the latitude coordinate of the location where the
            Driver was last tracked.
          format: double
        location:
          type: string
          description: Contains the address of the location where the Driver was last
            tracked.
        longitude:
          type: number
          description: Indicates the longitude coordinate of the location where the
            Driver was last tracked.
          format: double
        mobileOSVersion:
          type: string
          description: Information for the OS version of the device used to record
            the last Status of the Driver.
        name:
          type: string
          description: The name of the Driver.
        nextViolation:
          type: string
          description: The next Violation the Driver will be getting if the Driver
            is currently driving, otherwise this is not returned.
        nextViolationTimestamp:
          type: string
          description: Information for the time remaining until the next Violation
            if the driver is currently driving, otherwise this is not returned.
        odometerKm:
          type: number
          description: The Odometer of the Vehicle during the last Status of the Driver
          format: double
        softwareVersion:
          type: string
          description: Information for App version used to record the last Status
            of the Driver.
        speedKph:
          type: number
          description: 'The speed of the Vehicle during the last Status of the Driver. '
          format: double
        subsetId:
          type: integer
          description: Auto assigned. Indicates the Subset of the Terminal where the
            Driver is assigned
          format: int64
        terminalId:
          type: integer
          description: Auto assigned. Id of the Terminal where the Driver is assigned
          format: int64
        uncertifiedLogs:
          type: integer
          description: The number of uncertified Driver Daily logs the User has during
            his/her latest Driver Status. This is only returned on GET.
          format: int32
        userId:
          type: integer
          description: The id of the Driver that is tied to this status.
          format: int64
        vbusConnected:
          type: boolean
          description: Indicates whether or not the Vehicle was connected to the VBUS
            device when the event occurred.
        vehiclePowerOn:
          type: boolean
          description: Indicates whether or not the Vehicle was powered on when the
            event occurred
        driverAlias:
          type: string
          description: The id of the Driver(alias) that is tied to this status.
      description: The Equipment record contains the Equipment’s vehicular information,
        its name and type, associated DVIR Form, its Terminal, the Visibility Set
        it belongs to and the ELD properties associated with it.
    ELDMalfunction:
      required:
        - assetId
        - userId
      type: object
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        assetId:
          type: integer
          description: The id of the Vehicle used during this ELD Malfunction
          format: int64
        beginTimestamp:
          type: string
          description: 'Date and time when the ELD Malfunction began.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        driverHistoryUUID:
          type: string
          description: The id of the Driver History record associated with the ELD Malfunction.
          format: uuid
        endTimestamp:
          type: string
          description: 'Date and time when the ELD Malfunction ended.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        eventType:
          $ref: "#/components/schemas/EventType"
        description:
          type: string
          description: 'The description of eld malfunction and issue.'
        id:
          type: integer
          description: Auto generated. Unique identifier.
          format: int64
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        userId:
          type: integer
          description: The id of the Driver who owns this ELD Malfunction
          format: int64
        driverAlias:
          type: string
          description: The id of the Driver(alias) that is tied to this status.
    EquipmentMeta:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Equipment:
      required:
      - assetType
      - name
      type: object
      properties:
        assetType:
          $ref: '#/components/schemas/AssetType'
        active:
          type: boolean
          description: Indicates if the current equipment is active or inactive.
        createDate:
          type: string
          description: 'Auto-generated timestamp of the date and time this record
            was created. Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ,
            e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        deactivatedAt:
          type: string
          description: 'Indicates the date and time when the Equipment was deactivated.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z).'
          format: date-time
        deletedAt:
          type: string
          description: 'Indicates the date and time when the Equipment was soft-deleted.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z). This is not returned for Equipment that have
            not been soft-deleted.'
          format: date-time
        eldConnectionProperties:
          $ref: '#/components/schemas/EldConnectionProperties'
        eldEsn:
          type: integer
          description: The ELD ESN for the CalAmp device paired with this Equipment.
          format: int64
        externalId:
          type: string
          description: Customer's external id for this equipment.
        firmwareVersion:
          type: string
          description: Equipment firmware revision.
        formId:
          type: integer
          description: The id of the default DVIR Form associated with the Equipment.
          format: int64
        gpsSource:
          $ref: '#/components/schemas/GpsSource'
        hasBerth:
          type: boolean
          description: Sleeper berth available.
        homeTerminalId:
          type: integer
          description: The id of the Terminal under which this Equipment belongs to.
            If not provided in the JSON POST or PUT, automatically assigns the authenticated
            Driver’s homeTerminalId or the Main Office Terminal if not available
          format: int64
        id:
          type: integer
          description: Auto generated. Unique identifier.
          format: int64
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        licensePlate:
          type: string
          description: The license plate of this Equipment.
        licensePlateState:
          type: string
          description: |
            The state of the license plate of this Equipment. Can either be one of the following state codes:

              * USA: AL, AK, AR, AZ, CA, CO, CT, DC, DE, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY
              * USA Protectorates: AS, DC, GU, MP, PR, VI
              * Canada: AB, BC, MB, NB, NF, NS, NT, ON, PE, QC, SK, YT
              * Mexico: MEX_AG, MEX_BN, MEX_BS, MEX_CH, MEX_CI, MEX_CL, MEX_CP, MEX_CS, MEX_DF, MEX_DG, MEX_GE, MEX_GJ, MEX_HD, MEX_JA, MEX_MC, MEX_MR, MEX_MX, MEX_NA, MEX_NL, MEX_OA, MEX_PU, MEX_QE, MEX_QI, MEX_SI, MEX_SL, MEX_SO, MEX_TA, MEX_TB, MEX_TL, MEX_VC, MEX_YU, MEX_ZA
        name:
          type: string
          description: The name of Equipment as displayed in the user interface.
        odometerOffsetKm:
          type: number
          format: double
        regulationMode:
          type: string
          description: Indicates the regulation mode used by this Equipment. Can either
            be “ELD” or “AOBRD”
        useGpsOdometer:
          type: boolean
          description: Indicates if this Equipment uses GPS Odometer or not.
        useManualEngineHours:
          type: boolean
          description: Indicates if this Equipment uses manual engine hours or not.
        vin:
          type: string
          description: The VIN of this Equipment.
        visibilitySetIds:
          type: array
          description: 'Contains a list of IDs of the Visibility Sets that this Equipment
            is included in. Note: When there is no Visibility Set saved, the Account’s
            default Visibility Set is set. Users with PERM_IS_ASSETADMIN only cannot
            assign Visibility Sets they do not have access to.'
          items:
            type: integer
            format: int64
        vbusConnectionRequired:
          type: boolean
          description: If set to true, driver is required to be connected to a VBUS
            device before he can go driving.
    UsStates:
      type: string
      enum:
      - AL
      - AK
      - AR
      - AZ
      - CA
      - CO
      - CT
      - DC
      - DE
      - FL
      - GA
      - HI
      - ID
      - IL
      - IN
      - IA
      - KS
      - KY
      - LA
      - ME
      - MD
      - MA
      - MI
      - MN
      - MS
      - MO
      - MT
      - NE
      - NV
      - NH
      - NJ
      - NM
      - NY
      - NC
      - ND
      - OH
      - OK
      - OR
      - PA
      - RI
      - SC
      - SD
      - TN
      - TX
      - UT
      - VT
      - VA
      - WA
      - WV
      - WI
      - WY
    UsProtectorates:
      type: string
      enum:
      - AS
      - DC
      - GU
      - MP
      - PR
      - VI
    CanadaStates:
      type: string
      enum:
      - AB
      - BC
      - MB
      - NB
      - NF
      - NS
      - NT
      - 'ON'
      - PE
      - QC
      - SK
      - YT
    MexicoStates:
      type: string
      enum:
      - MEX_AG
      - MEX_BN
      - MEX_BS
      - MEX_CH
      - MEX_CI
      - MEX_CL
      - MEX_CP
      - MEX_CS
      - MEX_DF
      - MEX_DG
      - MEX_GE
      - MEX_GJ
      - MEX_HD
      - MEX_JA
      - MEX_MC
      - MEX_MR
      - MEX_MX
      - MEX_NA
      - MEX_NL
      - MEX_OA
      - MEX_PU
      - MEX_QE
      - MEX_QI
      - MEX_SI
      - MEX_SL
      - MEX_SO
      - MEX_TA
      - MEX_TB
      - MEX_TL
      - MEX_VC
      - MEX_YU
      - MEX_ZA
    EldConnectionProperties:
      type: object
      additionalProperties:
        type: string
    AssetType:
      type: string
      enum:
      - Vehicle
      - Trailer
    EventType:
      type: string
      enum:
        - OffDuty
        - Sleeper
        - Driving
        - OnDuty
        - WaitingAtSite
        - Remark
        - AddedExceptionRemark
        - RemovedExceptionRemark
        - AsphaltBeginBreakRemark
        - AsphaltEndBreakRemark
        - BorderCrossingRemark
        - CargoSecurementRemark
        - CarrierInformationChangedRemark
        - RulesetChangedRemark
        - EldAuthenticationRemark
        - EldUnauthenticationRemark
        - HazMatBeginBreakRemark
        - HazMatEndBreakRemark
        - OffRoadRemark
        - OnRoadRemark
        - PreTripDvirNotPerformedRemark
        - StartOfDayOdoRemark
        - TollRoadBeginRemark
        - TollRoadEndRemark
        - VbusConnectedRemark
        - VbusDisconnectedRemark
        - SwitchVehicleRemark
        - SwitchTrailerRemark
        - DvirCompletedRemark
        - ShippingDocChangedRemark
        - AssumeRoleAsActiveDriverRemark
        - RemoveRoleAsActiveDriverRemark
        - StartTimeOfDayRemark
        - EnableSBOffDutyPairingRemark
        - DisableSBOffDutyPairingRemark
        - EldIdentifier
        - Inter
        - InterRP
        - PersonalUse
        - PersonalConveyance
        - YardMoves
        - ClearPU
        - ClearPC
        - ClearYM
        - Certify
        - Login
        - Logout
        - PowerOn
        - PowerOnRP
        - PowerOff
        - PowerOffRP
        - MalPower
        - MalSync
        - MalTime
        - MalPos
        - MalRecord
        - MalTransfer
        - MalOther
        - MalPowerClear
        - MalSyncClear
        - MalTimeClear
        - MalPosClear
        - MalRecordClear
        - MalTransferClear
        - MalOtherClear
        - DiagPower
        - DiagSync
        - DiagMissing
        - DiagTransfer
        - DiagUnidentified
        - DiagOther
        - DiagPowerClear
        - DiagSyncClear
        - DiagMissingClear
        - DiagTransferClear
        - DiagUnidentifiedClear
        - DiagOtherClear
        - ExcludeDriveTime
        - GpsNoFix
        - VbusConnected
        - TabletNotCharging
        - SyncEngine
        - DataTransferMonitoring
        - UnconfirmedDataTransfer
        - CanOffDutyDeferNone
        - CanOffDutyDeferDay1
        - CanOffDutyDeferDay2
        - CanCycle1
        - CanCycle2
        - CanSouthZone
        - CanNorthZone
        - USAZone
        - MexZone
        - CanAdlHoursOption1
        - CanAdlHoursOption2
    GpsSource:
      type: string
      enum:
      - MOBILE_DEVICE
      - VBUS_DEVICE
      - EITHER_DEVICE
    DefaultUserPreferences:
      type: object
      properties:
        id:
          type: integer
          description: Unique Identifier
          format: int64
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        displayName:
          type: string
          description: The display name of the Default User Preference.
        isEditable:
          type: boolean
          description: Indicates if the Default User Preference is editable or not.
            (Defaults to false)
        isParent:
          type: boolean
          description: Indicates if the Default User Preference is a parent or not.
        key:
          type: string
          description: |
            String identifier for the User Preference. Predefined User Preferences can either be one of the following:
              * com.vistracks.vtlib.GPS_SECONDS_INTERVAL
              * com.vistracks.vtlib.SHOW_DRIVER_LOGS
              * com.vistracks.vtlib.SHOW_JOBSITE
              * com.vistracks.vtlib.SHOW_WORKORDER
              * com.vistracks.vtlib.VBUS_DATA_SYNC_ENABLED
              * com.vistracks.vtlib.SERVER_CONTROLS_SETTINGS
              * HOS_DRIVER_EDITING_ENABLED
              * COLOR_THEME
          enum:
          - com.vistracks.vtlib.GPS_SECONDS_INTERVAL
          - com.vistracks.vtlib.SHOW_DRIVER_LOGS
          - com.vistracks.vtlib.SHOW_JOBSITE
          - com.vistracks.vtlib.SHOW_WORKORDER
          - com.vistracks.vtlib.VBUS_DATA_SYNC_ENABLED
          - com.vistracks.vtlib.SERVER_CONTROLS_SETTINGS
          - HOS_DRIVER_EDITING_ENABLED
          - COLOR_THEME
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        prefType:
          type: string
          description: 'Indicates the type of value the User Preference can be set
            to. Either: BOOL_PREF / STRING_PREF.'
          enum:
          - BOOL_PREF
          - STRING_PREF
        stringVal:
          type: string
          description: Indicates the value of the User Preference.
        userId:
          type: integer
          description: The id of the User that owns this Preference.
          format: int64
      description: Default User Preferences contain a set of settings associated with
        a specific Account that are immediately available upon creation. These User
        Preferences often contain Account settings and controls the options that will
        or will not be available for the Users of that particular Account when accessing
        the portal and the application.
    DriverViolationDocuments:
      type: object
      properties:
        accountId:
          type: integer
          description: Unique Identifier
          format: int64
        changedBy:
          type: string
          description: The name of the User who made the last change to this record
        driverViolationId:
          type: integer
          description: Id of the Driver Violation associated with the Document.
          format: int64
        id:
          type: integer
          description: Unique Identifier
          format: int64
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        note:
          type: string
          description: Notes/Details about the Document.
        media:
          type: array
          description: Contains the PDF(s) of the Driver Violation Document
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
              filename:
                type: string
              isParent:
                type: boolean
              accountId:
                type: integer
                format: int64
        userId:
          type: integer
          description: The id of the User that owns this Preference.
          format: int64
        driverAlias:
          type: string
          description: The id of the Driver(alias) that is tied to this status.  
      description: Driver Violation Documents is use to upload HOS Driver Violation
        – Action Report to support and acknowledged the Driver Violations recorded
        from the HOS App.
    HosCarrierProperties:
      type: object
      required:
        - carrierDotNumber
        - carrierName
        - city
        - country
        - phoneNumber
        - startTimeOfDay
        - state
        - street
        - timezone
        - zip
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        carrierDotNumber:
          type: string
          description: The DOT number of the Carrier. Processed in json as a string but it represents an integer (max value of 999999999)
          maxLength: 9
          minLength: 1
        carrierName:
          type: string
          description: The name of the Carrier
          maxLength: 120
          minLength: 4
        city:
          type: string
          description: The city where the Carrier is located
        country:
          $ref: '#/components/schemas/Country'
        isDefault:
          type: boolean
          description:  Indicates whether the Carrier is the default Carrier or not.
            Only one Carrier can be set as default at any given time. Setting this to true for one Carrier will set all other Carriers to false
        driverEquipmentEdit:
          type: string
        phoneNumber:
          type: string
          description: The phone number of the Carrier
        showIncludeVBUSData:
          type: boolean
          description: Indicates whether to include vbus data or not.
        showPersonalConveyance:
          type: boolean
          description: Indicates whether to show personal conveyance or not.
        showYardMoves:
          type: boolean
          description: Indicates whether to show yards moves or not.
        startTimeOfDay:
          type: string
          description: 'The start time of day set for the Carrier. Note: Format must be in (HH:MM:SS)'
        state:
          type: string
          description: |
            The state where the Carrier is located. Can either be one of the following state codes:
              * USA: AL, AK, AR, AZ, CA, CO, CT, DC, DE, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY, AS, DC, GU, MP, PR, VI
              * Canada: AB, BC, MB, NB, NF, NS, NT, ON, PE, QC, SK, YT
              * Mexico: MEX_AG, MEX_BN, MEX_BS, MEX_CH, MEX_CI, MEX_CL, MEX_CP, MEX_CS, MEX_DF, MEX_DG, MEX_GE, MEX_GJ, MEX_HD, MEX_JA, MEX_MC, MEX_MR, MEX_MX, MEX_NA, MEX_NL, MEX_OA, MEX_PU, MEX_QE, MEX_QI, MEX_SI, MEX_SL, MEX_SO, MEX_TA, MEX_TB, MEX_TL, MEX_VC, MEX_YU, MEX_ZA
        street:
          type: string
          description: The street where the Carrier is located
        street2:
          type: string
        miscInfo:
          type: string
          description: Miscellaneous information about Carrier
        timezone:
          $ref: '#/components/schemas/TimeZone'
        zip:
          type: string
          description: The postal code where the Carrier is located
        id:
          type: integer
          description: Auto generated. Unique Identifier for the Carrier
          format: int64
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        uuid:
          type: string
          format: uuid
          description: Unique identifier of the Carrier
      description: The HOS Carrier Properties endpoint handles a collection of Carriers from which admin personnel
        can assign Drivers to, depending on which Carrier they are working for on that particular day.
        It should be noted that values saved using this API are saved into the Account Property named “hos.carrier.information”
        and if the default Carrier is edited, it also updates the “hos.mainoffice.*” Account Properties.
    TimeZone:
      type: string
      enum:
        - America/Anchorage
        - America/Phoenix
        - Canada/Atlantic
        - Canada/Newfoundland
        - CST6CDT
        - EST5EDT
        - Pacific/Honolulu
        - MST7MDT
        - America/Indiana/Knox
        - PST8PDT
        - America/Regina
    UserPreference:
      required:
      - key
      - userId
      type: object
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        displayName:
          type: string
          description: The display name of the User Preference.
        id:
          type: integer
          description: Auto generated. Unique Identifier.
          format: int64
        isEditable:
          type: boolean
          description: Indicates if the User Preference is editable or not.
        key:
          type: string
          description: |
            String identifier for the User Preference. Predefined User Preferences can either be one of the following:
              * com.vistracks.vtlib.GPS_SECONDS_INTERVAL
              * com.vistracks.vtlib.SHOW_DRIVER_LOGS
              * com.vistracks.vtlib.SHOW_JOBSITE
              * com.vistracks.vtlib.SHOW_WORKORDER
              * com.vistracks.vtlib.VBUS_DATA_SYNC_ENABLED
              * com.vistracks.vtlib.SERVER_CONTROLS_SETTINGS
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        prefType:
          type: string
          description: 'Indicates the type of value the User Preference can be set
            to. Either: BOOL_PREF / STRING_PREF.'
        stringVal:
          type: string
          description: Indicates the value of the User Preference.
        userId:
          type: integer
          description: The id of the User that owns this Preference.
          format: int64
      description: User Preferences contain a set of settings associated with a specific
        User. These settings are set exclusively per User and are either set in the
        web portal by an admin personnel or set in the application according to the
        User’s choice. These User Preferences often contain Driver information and
        controls the options that will or will not be available for the User in the
        application.
    DriverHistory:
      required:
      - eventTime
      - eventType
      - recordOrigin
      - recordStatus
      - uuid
      type: object
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        accountUuid:
          type: string
          description: The optional uuid of the Account that owns this record. Will be used over accountId if match found.
          format: uuid
        assetId:
          type: integer
          description: The id of the Vehicle that the Driver used to perform this
            event.
          format: int64
        assetUuid:
          type: string
          description: The optional uuid of the Vehicle that the Driver used to perform this
            event. Will be used over assetId if match found.
          format: uuid
        autoEventEndTimestamp:
          type: string
          description: 'Date and time when the event has ended. This is only present
            on Auto Driving events Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ,
            e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        canAdlHoursDriving:
          type: string
          description: Canadian Rules for Additional Driving hours
        canAdlHoursOffDuty:
          type: string
          description: Canadian Rules for Additional Off Duty hours
        canAdlHoursOnDuty:
          type: string
          description: Canadian Rules for Additional On Duty hours
        canAdlHoursSleeper:
          type: string
          description: Canadian Rules for Additional Sleeper hours
        canAdlHoursWorkShiftStart:
          type: string
          description: Canadian Additional hours work shift start time.
          format: date-time
        canAdlHoursWorkShiftEnd:
          type: string
          description: Canadian Additional hours work shift end time.
          format: date-time
        canOffDutyTimeDeferred:
          type: string
          description: Canadian Rules for the amount of time deferred by the driver.
        certificationCount:
          type: integer
          description: Incremented every time a Driver certifies a Driver Daily
          format: int32
        certificationDate:
          type: string
          description: 'Date and Time when the Driver Daily has been certified. Note:
            Format must be in (YYYY-MM-DD)'
          format: date-time
        changeRequestedBy:
          type: integer
          description: The id of the User who is requesting an edit from the Driver.
            This is not returned for events that have not been edited.
          format: int64
        changeRequestedByName:
          type: string
          description: The name of the User who is requesting an edit from the Driver.
            This is not returned for events that have not been edited.
        changeRequestedByUuid:
          type: string
          description: The uuid of the User who is requesting an edit from the Driver.
            Will override changeRequestedByName and changeRequestedBy if match found.
          format: uuid
        coDriverUsernames:
          type: string
          description: List of email addresses of co-drivers.
        coDriverUserIds:
          type: string
          description: List of ids of co-drivers.
        coDriverUserUuids:
          type: array
          description: List of optional uuids of co-drivers. Will be used instead of coDriverUserIds/coDriverUsernames if match found.
          items:
            type: string
            format: uuid
        cycleResetTimestamp:
          type: string
          description: 'A Date and time when the cycle reset has been taken. Note:
            Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        dataCheck:
          type: integer
          description: The hexadecimal representation of the event’s output 8-bit
            byte.
          format: int32
        deletedAt:
          type: string
          description: 'The date and time when an event is soft deleted. Note: Format
            is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        diagnosticIndicator:
          type: boolean
          description: Indicates if a device has a Data Diagnostic
        distanceLastGpsKm:
          type: number
          description: The distance recorded in the Last GPS update of the Driver
            in KM unit
          format: double
        driverDailyId:
          type: integer
          format: int64
        driverEdit:
          type: boolean
          description: Indicates if the event has been edited.
        editReason:
          type: string
          description: |
            A reason to be entered when the Driver edits the event, can be customized or from a list of of pre-defined reasons:
              * Rental Vehicle no ELD on-board
              * ELD Device Failure
              * Missing GPS Location
              * Incorrect Status Selected
              * Incorrect Data Entered
              * Driver Not Logged On
              * Engineers Road Test"
        editTime:
          type: string
          description: 'Represents the UTC time at which the Driver/Host user made the edit. Note: Format is in timestamp
            and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        endEventTime:
          type: string
          description: 'Date and time when the event ended Note: Format is in timestamp
            and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        engineHours:
          type: string
          description: The number of hours the engine has been running.
        eventSequenceIdentifier:
          type: integer
          description: The sequence identifier of the event.
          format: int32
        eventTime:
          type: string
          description: 'Date and time of event change Note: Format is in timestamp
            and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        eventType:
          $ref: '#/components/schemas/EventType'
        eventTypeSpecificData:
          type: string
        excludeDrivingBeginTimestamp:
          type: string
          description: This is the begintime stamp for the excludeDriving for eventType
            enum.
          format: date-time
        excludeDrivingEndTimestamp:
          type: string
          description: This is the endtime stamp for the excludeDriving for eventType
            enum.
          format: date-time
        gpsSource:
          $ref: '#/components/schemas/GpsSource'
        id:
          type: integer
          description: Auto generated. Unique Identifier.
          format: int64
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        latitude:
          type: number
          description: Latitude of the location if available.
          format: double
        localTime:
          type: string
          format: date-time
        location:
          type: string
          description: The address where event was initiated.
        logExceptionType:
          $ref: '#/components/schemas/LogExceptionType'
        logTimestamp:
          type: string
          format: date-time
        longitude:
          type: number
          description: Longitude of the location if available.
          format: double
        malfunctionIndicator:
          type: boolean
          description: Indicates if a device has an ELD Malfunction
        note:
          type: string
          description: An optional note entered by driver associated with this event.
        note2:
          type: array
          description: Additional optional notes entered by driver associated with this event.
          items:
            type: string
        odometerKm:
          type: number
          description: Odometer value of the Vehicle during this event.
          format: double
        odometerSource:
          $ref: '#/components/schemas/OdometerSource'
        recordOrigin:
          $ref: '#/components/schemas/RecordOrigin'
        recordStatus:
          $ref: '#/components/schemas/RecordStatus'
        regulationMode:
          $ref: '#/components/schemas/RegulationMode'
        rejectionReason:
          type: string
        relatedUuid:
          type: string
          description: The UUID of the Driver History that is related to the current
            record.
        state:
          type: string
          description: |
            The state where the event was recorded. This is to be used for State Mileage calculations. Can either be one of the following state codes:

              * USA: AL, AK, AR, AZ, CA, CO, CT, DC, DE, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY
              * USA Protectorates: AS, DC, GU, MP, PR, VI
              * Canada: AB, BC, MB, NB, NF, NS, NT, ON, PE, QC, SK, YT
              * Mexico: MEX_AG, MEX_BN, MEX_BS, MEX_CH, MEX_CI, MEX_CL, MEX_CP, MEX_CS, MEX_DF, MEX_DG, MEX_GE, MEX_GJ, MEX_HD, MEX_JA, MEX_MC, MEX_MR, MEX_MX, MEX_NA, MEX_NL, MEX_OA, MEX_PU, MEX_QE, MEX_QI, MEX_SI, MEX_SL, MEX_SO, MEX_TA, MEX_TB, MEX_TL, MEX_VC, MEX_YU, MEX_ZA
        shippingDocsManifestNo:
          type: string
          description: The Shipping Document’s Manifest number.
        speedKph:
          type: number
          description: The speed of the Vehicle at the time of the current event
          format: double
        source:
          $ref: '#/components/schemas/DriverHistorySource'
        trailerNumbers:
          type: string
          description: The Trailer names associated with the current PowerOn or PowerOff
            event.
        trailerUuids:
          type: array
          description: List of optional uuids of the trailers associated with the current PowerOn or PowerOff.
            Will override trailerNumbers.
          items:
            type: string
            format: uuid
        useCycleReset:
          type: boolean
          description: Indicates when a driver has taken a cycle reset.
        userId:
          type: integer
          description: The id of the Driver who performed this Driver History event.
          format: int64
        userUuid:
          type: string
          description: The optional uuid of the Driver who performed this Driver History event.
            Will be used over userId if match found.
          format: uuid
        username:
          type: string
          description: The username of the Driver who performed this Driver History
            event.
        uuid:
          type: string
          description: Universally unique identifier.
        validBeginTime:
          type: string
          description: 'Date and time when the event is created Note: Format is in
            timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        validEndTime:
          type: string
          description: 'Date and time when the event ended Note: Format is in timestamp
            and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        vin:
          type: string
          description: The Vehicle Identification Number of the Vehicle associated
            with the event.
        driverAlias:
          type: string
          description: The id of the Driver(alias) that is tied to this status.
        rootCause:
          type: integer
          format: int32
        subcode:
          type: integer
          format: int32
        modifiedAt:
          type: string
          description: 'Date and time when the event was generated/updated.'
          format: date-time
      description: The Driver History events on his/her Logs are stored and accessed
        using the driverHistories endpoint.  This API provides access to Driving History
        information such as the Record Status, Event Record Origin, and Event Type
        for records which are either recorded automatically, created manually by a
        Driver, or created manually by an Authorized Personnel.
    DriverHistorySource:
      type: string
      enum:
        - ES_TRANSLATION
        - XRS_TRANSLATION
    DrivingRuleType:
      type: string
      enum:
        - SHIFT_DRIVE_HOURS
        - SHIFT_ELAPSED_HOURS
        - CYCLE_DUTY_HOURS
        - BREAK_DRIVE_HOURS
        - CAN_CYCLE_DRIVE_HOURS
        - CAN12_1_DAILY_DRIVE_HOURS
        - CAN12_2_DAILY_DUTY_HOURS
        - CAN13_1_SHIFT_DRIVE_HOURS
        - CAN13_2_SHIFT_DUTY_HOURS
        - CAN13_3_SHIFT_ELAPSED_HOURS
        - CAN14_1AND2_DAILY_OFF_DUTY_10HOURS
        - CAN14_3_DAILY_OFF_DUTY_2HOURS
        - CAN16_DAILY_OFF_DUTY_DEFERRAL_HOURS
        - CAN25_MAN_24OFF_DUTY_HOURS
        - CAN26_CYCLE1_DUTY_HOURS
        - CAN27A_CYCLE2_DUTY_HOURS
        - CAN27B_CYCLE2_24OFF_DUTY_HOURS
        - CAN63_OIL_WELL_CYCLE_DUTY_HOURS
        - ALBERTA_SHIFT_DRIVE_HOURS
        - ALBERTA_SHIFT_DUTY_HOURS
        - ALBERTA_BREAK_HOURS
        - MEX_SHIFT_DRIVE_HOURS
        - MEX_BREAK_DRIVE_HOURS
    RecordOrigin:
      type: string
      enum:
      - Auto
      - Driver
      - EditRequest
      - FromUnidentifiedDriver
    RecordStatus:
      type: string
      enum:
      - Active
      - InactiveChanged
      - InactiveChangeRequested
      - InactiveChangeRejected
    RegulationMode:
      type: string
      enum:
      - ELD
      - AOBRD
      - LOGBOOK
    OdometerSource:
      type: string
      enum:
      - ECU
      - Manual
      - GPS
    Driver:
      required:
      - cdlIssuingState
      - cdlNumber
      - cycleCa
      - cycleMex
      - cycleUsa
      - email
      - password
      - region
      - showPersonalConveyance
      - showYardMoves
      - startTimeOfDay
      type: object
      properties:
        accountId:
          type: integer
          format: int64
          description: The account id of the account this driver is associated with.
        active:
          type: boolean
          description: Indicates if the Driver is currently active or not
        alias:
          type: string
          description: An optional identifier for the Driver within an Account. This
            is not shown if the value is null.
        aobrdSpeedThresholdEnabled:
          type: boolean
          description: Indicates if AOBRD speed threshold feature is enabled.
        authorizedTerminalIds:
          type: array
          description: A list of ids of the Terminals that the Driver can manage.
            If the Driver does not have the Permission PERM_VIEW_ALL_TERMINALS then
            the Terminals API will only return information for these Terminals.
          items:
            type: integer
            format: int64
        canAddTrailer:
          type: boolean
          description: Indicates if the Driver is allowed to add Assets of type Trailer
            in the app.
        canAddVehicle:
          type: boolean
          description: Indicates if the Driver is allowed to add Assets of type Vehicle
            in the app.
        canDeleteTrailer:
          type: boolean
          description: Indicates if the Driver is allowed to delete Assets of type
            Trailer in the app.
        canDeleteVehicle:
          type: boolean
          description: Indicates if the Driver is allowed to delete Assets of type
            Vehicle in the app.
        canEditTrailer:
          type: boolean
          description: Indicates if the Driver is allowed to edit Assets of type Trailer
            in the app.
        canEditVehicle:
          type: boolean
          description: Indicates if the Driver is allowed to edit Assets of type Vehicle
            in the app.
        cargo:
          $ref: '#/components/schemas/Cargo'
        cargoChangeAllowed:
          type: boolean
          description: Can cargo type be changed?
        carrierChangeAllowed:
          type: boolean
          description: Can carrier be changed?
        carrierId:
          type: integer
          description: Unique identifier for the carrier.
          format: int64
        cdlIssuingState:
          type: string
          description: |
            Commercial Driver’s License Issuing State. Can either be one of the following state codes:

              * `USA`: AL, AK, AR, AZ, CA, CO, CT, DC, DE, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY
              * `USA Protectorates`: AS, DC, GU, MP, PR, VI
              * `Canada`: AB, BC, MB, NB, NF, NS, NT, ON, PE, QC, SK, YT
              * `Mexico`: MEX_AG, MEX_BN, MEX_BS, MEX_CH, MEX_CI, MEX_CL, MEX_CP, MEX_CS, MEX_DF, MEX_DG, MEX_GE, MEX_GJ, MEX_HD, MEX_JA, MEX_MC, MEX_MR, MEX_MX, MEX_NA, MEX_NL, MEX_OA, MEX_PU, MEX_QE, MEX_QI, MEX_SI, MEX_SL, MEX_SO, MEX_TA, MEX_TB, MEX_TL, MEX_VC, MEX_YU, MEX_ZA
        cdlNumber:
          type: string
          description: Commercial Driver’s License Number (1-20 alphanumeric characters).
        cycleCa:
          type: string
          description: |
            This indicates the type of Canada driving cycle associated with the record when Canada is region is selected. This can either be one of the following:

              * Can70hr7daysSouth
              * Can120hr14daysSouth
              * Can80hr7daysNorth
              * Can120hr14daysNorth
              * Alberta
        cycleChangeAllowed:
          type: boolean
        cycleUsa:
          type: string
          description: |
            This indicates the type of USA driving cycle associated with the record when USA region is selected. Can either be one of the following:

              * US60hr7days
              * US70hr8days
              * Alabama60hr7days
              * Alabama70hr8days
              * Alaska70hr7days
              * Alaska80hr8days
              * California80hr8days
              * Florida70hr7days
              * Florida80hr8days
              * Illinois60hr7days
              * Illinois70hr8days
              * Maryland70hr7days
              * Maryland80hr8days
              * Massachusetts60hr7days
              * Massachusetts70hr8days
              * Minnesota60hr7days
              * Minnesota70hr8days
              * Michigan60hr7days
              * Michigan70hr8days
              * NewHampshire60hr7days
              * NewHampshire70hr8days
              * NewYork60hr7days
              * NewYork70hr8days
              * NorthCarolina70hr7days
              * NorthCarolina80hr8days
              * NorthDakota70hr7days
              * Pennsylvania60hr7days
              * Pennsylvania70hr8days
              * SouthCarolina70hr7days
              * SouthCarolina80hr8days
              * Tennessee60hr7days
              * Tennessee70hr8days
              * Texas70Hr7days
              * Vermont60hr7days
              * Vermont70hr8days
              * Virginia70hr7days
              * Virginia80hr8days
              * Wisconsin70hr7days
              * Wisconsin80hr8days
        cycleMex:
          type: string
          description: Mexico
        deactivatedDate:
          type: string
          description: 'Timestamp when the Driver was deactivated. This field is not
            shown for active Drivers. Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ,
            e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        driverEditingEnabled:
          type: boolean
        email:
          type: string
          description: Email address that uniquely identifies Driver within the system.
          format: email
        enabledFeatures:
          type: array
          description: |
            Indicates the features enabled for this Driver. Can contain any of the following as long as the Account also has them enabled:
              * ELD
              * DVIR
              * WORK_ORDERS
          items:
            type: string
        exemptAnnotation:
          type: string
          description: Annotation if the Driver is an exempt Driver.
        exemptDriver:
          type: boolean
          description: Indicates if the Driver is an exempt Driver or not.
        firstName:
          type: string
          description: First Name of the Driver.
        fullName:
          type: string
          description: Full Name of the Driver.
        homeTerminalId:
          type: integer
          description: 'Id of the Terminal where the Driver is assigned '
          format: int64
        hosSkin:
          type: string
          description: Indicates the name of any custom skin selected for the driver.
        id:
          type: integer
          description: Auto generated. Unique identifier for the Driver.
          format: int64
        isAssetAdmin:
          type: boolean
          description: Indicates if the Driver has an Asset Admin role or not.
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        lastName:
          type: string
          description: Last Name of the Driver.
        manageEquipment:
          type: boolean
          description: Indicates if the Driver can manage Equipment. Cannot be used
            in POST and PUT, only in GET.
          format: string
        offSbPairingMode:
          $ref: '#/components/schemas/OffSbPairingMode'
        password:
          type: string
          description: Initial password for Driver.
          format: password
        pcMaxDistanceUSA:
          type: integer
          description: Personal conveyance max distance
          format: int32
        promptLoginValue:
          $ref: '#/components/schemas/PromptValue'
        promptLogoutValue:
          $ref: '#/components/schemas/PromptValue'
        recipient:
          type: string
          description: To whom the reports of the Driver will be emailed
        region:
          type: string
          description: |
            Information for the region of the Driver.
            Can either be “USA“ or “Canada“
        showPersonalConveyance:
          type: boolean
          description: Indicates if the Driver is allowed Personal Conveyance or not.
        showYardMoves:
          type: boolean
          description: Indicates if the Driver is allowed Yard Moves or not.
        startTimeOfDay:
          type: string
          description: 'Information for the Start Time of Day of the Driver. Note:
            Format must be in (HH:MM:SS)'
          format: time
        subsetId:
          type: integer
          description: Indicates the Subset of the Terminal where the Driver is assigned.
          format: int64
        suffix:
          type: string
          description: Suffix for Driver's name.
        system:
          type: boolean
          description: Indicates if the Driver is of type system (unidentified driver)
            or is an authenticated Driver.
        uuid:
          type: string
          format: uuid
          description: Unique identifier
        yardMoveTermination:
          $ref: '#/components/schemas/YardMoveTermination'
    YardMoveTermination:
      type: string
      enum: 
        - POWER_CYCLE
        - SPEED
        - BOTH
      description: The manner in which a yard move is detected to be terminated.
    OffSbPairingMode:
      type: string
      enum:
        - PAIRING_DISABLED
        - PAIRING_ASSUMED
        - PAIRING_ALLOWED
    PromptValue:
      type: string
      enum:
        - LOGIN_ADJUST
        - LOGIN
        - LOGOUT_ADJUST
        - LOGOUT
        - NONE
    DriverDaily:
      required:
      - carrier
      - carrierDotNumber
      - certified
      - cycleCan
      - cycleUsa
      - driverEmail
      - homeTerminalAddress
      - homeTerminalTimeZone
      - logDate
      - mainOfficeAddress
      - userId
      - username
      type: object
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        androidOsVersion:
          type: string
          description: Indicates the Android OS version of the device used by the
            Driver on this day.
        androidSoftwareVersion:
          type: string
          description: Indicates the Android App version used by the Driver on this
            day.
        attachedTrailers:
          type: string
          description: Deprecated. Indicates all Trailers that have been used by the
            Driver on this day.
        canOffDutyDeferDay:
          $ref: '#/components/schemas/CanOffDutyDeferDay'
        caOffDutyDeferral:
          type: string
          description: 'Canada OffDuty Deferral Status of the Driver on this day.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        cargo:
          $ref: '#/components/schemas/Cargo'
        carrier:
          type: string
          description: The Name of the Carrier under which the Driver operated on
            this day.
        carrierDotNumber:
          type: string
          description: The US DOT Number of the Carrier under which the Driver operated
            on this day. This must be a valid US DOT Number if the Driver is using
            a US Cycle.
        certified:
          type: boolean
          description: Indicates if this record has been Certified by Driver.
        certifyTimestamp:
          type: string
          description: 'Timestamp when the daily driver log was Certified Note: Format
            is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        coDriverHistory:
          type: array
          items:
            $ref: '#/components/schemas/IdNamePair'
        coDriverName:
          type: string
          description: Deprecated use coDriverHistory and coDrivers. Name of the Vehicle
            co-Driver on this day
        coDrivers:
          type: array
          items:
            $ref: '#/components/schemas/IdNamePair'
        cycleCan:
          type: string
          description: | # TODO: change this to enum?
            Indicates the Canada cycle and rules used. Canada available cycles are the following:
              * Can70hr7daysSouth
              * Can120hr14daysSouth
              * Can80hr7daysNorth
              * Can120hr14daysNorth
        cycleMex:
          type: string
          description: |
            Indicates the Mexico cycle and rules used. Mexico available cycles are the following:
              * Mexico
        cycleUsa:
          type: string
          description: | #TODO: change this to enum?
            Indicates the USA cycle and rules used. USA available cycles are the following:
              * US60hr7days
              * US70hr8days
              * Alabama60hr7days
              * Alabama70hr8days
              * Alaska70hr7days
              * Alaska80hr8days
              * California80hr8days
              * Florida70hr7days
              * Florida80hr8days
              * Illinois60hr7days
              * Illinois70hr8days
              * Maryland70hr7days
              * Maryland80hr8days
              * Massachusetts60hr7days
              * Massachusetts70hr8days
              * Michigan60hr7days
              * Michigan70hr8days
              * NewHampshire60hr7days
              * NewHampshire70hr8days
              * NewYork60hr7days
              * NewYork70hr8days
              * NorthCarolina70hr7days
              * NorthCarolina80hr8days
              * NorthDakota70hr7days
              * Pennsylvania60hr7days
              * Pennsylvania70hr8days
              * SouthCarolina70hr7days
              * SouthCarolina80hr8days
              * Tennessee60hr7days
              * Tennessee70hr8days
              * Texas70Hr7days
              * Vermont60hr7days
              * Vermont70hr8days
              * Virginia70hr7days
              * Virginia80hr8days
              * Wisconsin70hr7days
              * Wisconsin80hr8days
        date:
          type: string
          description: 'The date which is same as log date. Format: ‘YYYY-MM-DD’'
          format: date
        deviceIdentifier:
          type: string
          description: Unique string that identifies the last device used by the Driver
            that day. Can be the IMEI on GSM devices or the MEID for CDMA devices.
        driverDailyDocuments:
          type: array
          description: A collection of Driver Daily Documents associated with the
            Driver Daily
          items:
            $ref: '#/components/schemas/DriverDailyDocument'
        driverEmail:
          type: string
          description: The email address of the Driver.
          format: email
        driverFullName:
          type: string
          description: The full name of the Driver.
        driverPhone:
          type: string
          description: The contact number of the Driver.
        exceptionRemarks:
          type: string
          description: Remarks about the Driver Exceptions taken on this day.
        exceptions:
          type: string
          description: | # TODO: change this to enum?
            Driver Exceptions to DOT rules that were taken on this day.

              Available exceptions for USA are:

                * AdverseDrivingConditions
                * Agricultural
                * Asphalt30MinOnDutyBreak
                * CaliforniaTankDriver (for California cycles only)
                * DriverSalesPerson
                * DrivingWindow16Hour
                * EmergencyConditions
                * HazMatInAttendanceBreak
                * HiRail
                * MichiganSeasonalConstruction (for Michigan cycles only)
                * NotCmv
                * OilFieldOperations
                * OversizeLoads
                * PetroleumNoBreak
                * ShortHaulNoBreak
                * ShortHaulNoLog
                * ShortHaulReadyMixed
                * StateOfEmergency
                * TransportOfBeesOrLivestock
                * TwentyFourHourRestart
                * UtilityServiceVehicle

              For Canada the available exceptions are:

                * CanSpecialPermit
                * CanOilWellServicePermit
                * CanEmergencyConditions
                * CanAdverseDrivingConditions
                * CanLocalNoLog
        fields:
          type: array
          description: List of generic key-value pair for general usage. Example usage
            are for shipment details and miles driven today by states information.
          items:
            $ref: '#/components/schemas/Field'
        homeTerminalAddress:
          type: string
          description: Full address of Home Terminal
        homeTerminalTimeZone:
          type: string
          description: | # TODO: change this to enum?
            The ID of the time zone used by the Driver on this day:

              * America/Anchorage
              * America/Phoenix
              * Canada/Atlantic
              * Canada/Newfoundland
              * CST6CDT
              * EST5EDT
              * Pacific/Honolulu
              * MST7MDT
              * America/Indiana/Knox
              * PST8PDT
              * America/Regina
        id:
          type: integer
          description: Auto generated. Unique identifier
          format: int64
        iosOsVersion:
          type: string
          description: Information for the iOS version of the device used by the driver
            on this day.
        iosSoftwareVersion:
          type: string
          description: Information for the iOS app version used by the driver on this
            day.
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
        logDate:
          type: string
          description: 'The date for this Driver Daily. Same as date field. Format:
            ‘YYYY-MM-DD’'
          format: date
        mainOfficeAddress:
          type: string
          description: The full address of Main Office Terminal
        manualLog:
          type: boolean
          description: Indicates if the log was manually entered or not.
        mobileDeviceIdentifier:
          type: string
          description: Unique string that identifies the last device used by the Driver
            that day. Can be the IMEI on GSM devices or the MEID for CDMA devices.
        operatingZone:
          $ref: '#/components/schemas/OperatingZone'
        pdfToken:
          type: string
          description: The pdf token.
        shippingDocsManifestNo:
          type: string
          description: The Shipping Documents Manifest Number
        shippingDocsShipperCommodity:
          type: string
          description: The Shipper Documents Commodity
        startTimeOfDay:
          type: string
          description: 'The time start of each Driver Daily which defaults to midnight.
            Note: Format must be in (HH:MM:SS)'
        totalDrivingHours:
          type: string
          description: 'Total Driving Hours at the time of certification of the Driver
            Daily. Note: Must be in seconds Duration format (PT##S). Where ## is the
            number of seconds (see examples)'
        totalOffDutyHours:
          type: string
          description: 'Total Off Duty Hours at the time of certification of the Driver
            Daily. Note: Must be in seconds Duration format (PT##S). Where ## is the
            number of seconds (see examples)'
        totalOnDutyNDHours:
          type: string
          description: 'Total On Duty Not Driving Hours at the time of certification
            of the Driver Daily. Note: Must be in seconds Duration format (PT##S).
            Where ## is the number of seconds (see examples)'
        totalSleeperHours:
          type: string
          description: 'Total Sleeper Hours at the time of certification of the Driver
            Daily. Note: Must be in seconds Duration format (PT##S). Where ## is the
            number of seconds (see examples)'
        totalWaitingAtWellSiteHours:
          type: string
          description: 'Total Waiting at Well Site Hours at the time of certification
            of the Driver Daily. Note: Must be in seconds Duration format (PT##S).
            Where ## is the number of seconds (see examples)'
        trailersAttached:
          type: array
          items:
            $ref: '#/components/schemas/IdNamePair'
        trailerHistory:
          type: array
          items:
            $ref: '#/components/schemas/IdNamePair'
        trailerId:
          type: string
          description: Deprecated. A comma separated list of names of Trailers used
            by the driver on this day.
        useGpsOdometer:
          type: boolean
          description: Indicates if the odometer values for this Driver Daily is from
            the GPS.
        userId:
          type: integer
          description: The id of the Driver that is tied to this status.
          format: int64
        username:
          type: string
          description: The username of the Driver.
        vehicle:
          $ref: '#/components/schemas/IdNamePair'
        vehicleHistory:
          type: array
          items:
            $ref: '#/components/schemas/IdNamePair'
        vehicleId:
          type: string
          description: Deprecated. A comma separated list of names of Vehicles used
            by the Driver on this day.
        driverAlias:
          type: string
          description: The id of the Driver(alias) that is tied to this status.     
      description: 'The Driver Dailies endpoint provides a summary of a Driver’s day.  This
        record is updated throughout the Day and may be in a Certified or Uncertified
        state.  When the Driver certifies his log and the certification process produces
        a PDF document using the following fields: Driver Mileage, Driver Information,
        Driver History, Settings, and completed DVIRs.  In addition when a Driver
        certifies his log, the Driver Dailies API is updated to record the Driver’s
        final OnDutyND, Driving, OffDuty, and Sleeper hours for the day.  These hours
        may be useful to populate planning systems for Driver scheduling.'
    DriverDailyDocument:
      required:
      - documentType
      - media
      - userId
      type: object
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        address:
          type: string
          description: The address where the fuel was purchased based on the Fuel
            Receipt
        assetId:
          type: integer
          description: The id of the Vehicle refueled based on the Fuel Receipt
          format: int64
        city:
          type: string
          description: The city where the fuel was purchased based on the Fuel Receipt
        cost:
          type: number
          description: The price per liter of the fuel purchased based on the Fuel
            Receipt
          format: double
        country:
          $ref: '#/components/schemas/Country'
        dateTime:
          type: string
          description: 'The date and time when the fuel was purchased based on the
            Fuel Receipt. Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ,
            e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        deletedAt:
          type: string
          description: 'The date and time when this record was soft deleted. Note:
            Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        documentType:
          $ref: '#/components/schemas/DriverDailyDocumentType'
        driverDailyId:
          type: integer
          description: The id of the Driver Daily record associated with Document.
            If this is not included in the POST, it automatically gets today’s Driver
            Daily id. If the Driver does not have a Driver Daily record for today
            yet, the API automatically creates one and uses that id.
          format: int64
        fuelType:
          $ref: '#/components/schemas/FuelType'
        id:
          type: integer
          description: Auto generated. Unique identifier
          format: int64
        liters:
          type: number
          description: The number of liters purchased based on the Fuel Received
          format: double
        media:
          type: array
          description: The uploaded media attached to the Document. This is not required
            for Fuel Receipt
          items:
            $ref: '#/components/schemas/Media'
        note:
          type: string
          description: Notes/Details about the Document.
        odometerKm:
          type: number
          description: The Vehicle’s odometer value for the Fuel Receipt
          format: double
        referenceNumber:
          type: string
          description: The reference number of the Fuel Receipt
        state:
          type: string
          description: The state where the fuel was purchased based on the Fuel Receipt
        userId:
          type: integer
          description: The ID of the Driver of this Daily Document.
          format: int64
        driverAlias:
          type: string
          description: The id of the Driver(alias) that is tied to this status.  
      description: The Driver Daily Documents are the supporting Documents attached
        by the User of the Hours of Service application. The Documents are used to
        check their Logs for accuracy.
    IdNamePair:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Field:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    Media:
      type: object
      properties:
        accountId:
          type: integer
          format: int64
        filename:
          type: string
        isParent:
          type: boolean
          writeOnly: true
        media:
          type: array
          items:
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
            format: byte
          writeOnly: true
        name:
          type: string
    Country:
      type: string
      enum:
      - USA
      - Canada
      - Mexico
    OperatingZone:
      type: string
      enum:
      - USA
      - CanadaNorth
      - CanadaSouth
      - Mexico
      - Australia
    DriverDailyDocumentType:
      type: string
      enum:
      - BILL_OF_LADING
      - FUEL_RECEIPT
      - ACCIDENT_PHOTO
      - CITATION
      - SCALE_TICKET
      - PDF
      - OTHER
    FuelType:
      type: string
      enum:
      - Gasoline
      - SpecialDiesel
      - Gasohol
      - Propane
      - LNG
      - CNG
      - Ethanol
      - Methanol
      - E85
      - M85
      - A55
      - Biodiesel
    CanOffDutyDeferDay:
      type: string
      enum:
      - None
      - Day1
      - Day2
    Cargo:
      type: string
      enum:
      - PROPERTY
      - PASSENGER
    DriverDailyCount:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        certifiedLogs:
          type: integer
        uncertifiedLogs:
          type: integer
    FmcsaRequest:
      type: object
      properties:
        comment:
          type: string
        eldFilename:
          type: string
        eldFileContent:
          type: string
        eldIdentifier:
          type: string
        eldRegistrationId:
          type: string
    FmcsaResponse:
      type: object
      properties:
        status:
          type: string
        errorCount:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              errorType:
                type: string
              message:
                type: string
              detail:
                type: string
              line:
                type: integer
                format: int32
              start:
                type: integer
                format: int32
              end:
                type: integer
                format: int32
        broadcast:
          type: string
        submissionId:
          type: string
    FmcsaMultiRequest:
      type: object
      properties:
        assetIds:
          type: array
          items:
            type: integer
        comment:
          type: string
        driverIds:
          type: array
          items:
            type: integer
            format: int64
        fromDateTime:
          type: string
          format: date-time
        toDateTime:
          type: string
          format: date-time
    FmcsaMultiResponse:
      type: object
      properties:
        assetIds:
          type: array
          items:
            type: integer
            format: int64
        driverId:
          type: integer
          format: int64
        driverName:
          type: string
        fmcsaResponse:
          $ref: '#/components/schemas/FmcsaResponse'
    FmcsaPing:
      type: object
      properties:
        broadcast:
          type: string
        detail:
          type: string
        status:
          type: string
    User:
      type: object
      required:
      - email
      - homeTerminalId
      - password
      - userRoleIds
      - visibilitySetIds
      properties:
        accountId:
          type: integer
          format: int64
          description: "The id of the Account that owns this record"
        active:
          type: boolean
          description: "Indicates if the user is active or not"
        alias:
          type: string
          description: "An optional identifier for the User within an Account. This is not shown if the value is null."
        authorizedTerminalIds:
          type: array
          items:
            type: integer
            format: int64
          description: "A list of ids of the Terminals that the User can manage. If the User does not have the Permission PERM_VIEW_ALL_TERMINALS then the Terminals API will only return information for these Terminals."
        deactivatedDate:
          type: string
          format: date-time
          description: "  Timestamp when the User was deactivated. This field is not shown for active Users. Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)"
        deletedAt:
          type: string
          format: date-time
          description: "Indicates the date and time when the User was soft-deleted. Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z). This is not returned for Users that have not been soft-deleted."
        email:
          type: string
          format: email
          description: "Email address that uniquely identifies User within the system."
        enabledFeatures:
          type: array
          description: |
            Indicates the features enabled for this Driver. Can contain any of the following as long as the Account also has them enabled:
              * ELD
              * DVIR
              * WORK_ORDERS
          items:
            type: string
        eulaAcceptedDate:
          type: string
          format: date-time
          description: "Timestamp when the User accepted Hours of Service End User License Agreement. Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)"
        firstName:
          type: string
          description: "The first name of the User."
        homeTerminalId:
          type: integer
          format: int64
          description: "Id of the Terminal where the User is assigned."
        id:
          type: integer
          format: int64
          description: "Auto generated. Unique identifier for this User."
        isVerified:
          type: boolean
          description: "Indicates if the User is verified or not."
        lastChangedDate:
          type: string
          format: date-time
          description: "Auto-generated timestamp of the last change made to this record. Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)"
        lastName:
          type: string
          description: "The last name of the User."
        password:
          type: string
          format: password
          description: "The initial password of the User."
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
          description: "Contains a list of all the Permissions the User currently has."
        subsetId:
          type: integer
          format: int64
          description: "Only for Users that are Drivers. Indicates the Subset of the Terminal where the User is assigned."
        suffix:
          type: string
          description: "Suffix of the User’s name."
        userRoleIds:
          type: array
          items:
            type: integer
            format: int64
          description: "List of User Role IDs the User currently has."
        uuid:
          type: string
          format: uuid
          description: Unique identifier
        visibilitySetIds:
          type: array
          items:
            type: integer
            format: int64
          description: "List of Visibility Set IDs associated with the User."
    Permission:
      type: object
      properties:
        name:
          type: string
          description: "The name of the Permission."
        category:
          type: string
          description: "The category where the Permission belongs to."
        system:
          type: boolean
          description: "Indicates if a Permission is system or not."
        id:
          type: integer
          format: int64
          description: "Unique Identifier"
        displayName:
          type: string
          description: "The display name of the Permission"
    DriverViolationForCalc:
      type: object
      properties:
        drivingRuleType:
          $ref: '#/components/schemas/DrivingRuleType'
        iconLabel:
          type: string
        message:
          type: string
        timestamp:
          type: string
          description: 'Indicates the date and time as to when the Alert Notification
            was triggered.Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ,
            e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        title:
          type: string
        toolTipText:
          type: string
    DriverViolation:
      type: object
      properties:
        accountId:
          type: integer
          format: int64
          description: The id of the Account that owns this record.
        alertSent:
          type: boolean
        driverAlias:
          type: string
          description: The id of the Driver(alias) that is tied to this status.
        driverHistoryId:
          type: integer
          format: int64
          description: The id for associated Driver History record that triggered this Driver Violation
        iconLabel:
          type: string
        id:
          type: integer
          format: int64
          description: "Unique Identifier"
        lastChangedDate:
          type: string
          description: "Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)"
          format: date-time
        limit:
          type: string
          description: The limit at which when the violation would occur.
        message:
          type: string
        subsetId:
          type: integer
          format: int64
          description: Indicates the Subset of the Terminal where the Driver is assigned
        terminalId:
          type: integer
          format: int64
          description: Id of the Terminal where the Driver is assigned
        timestamp:
          type: string
          description: 'Indicates the date and time as to when the Alert Notification
            was triggered.Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ,
            e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        title:
          type: string
        toolTipText:
          type: string
        userId:
          type: integer
          format: int64
          description: The id of the Driver who owns the Violation.
        violationName:
          $ref: '#/components/schemas/DrivingRuleType'
    Report:
      type: object
      properties:
        description:
          type: string
          description: "Description of the Report"
        exportType:
          type: string
          maxLength: 255
          description: "Available export type of the Report"
        id:
          type: integer
          format: int64
          description: "Unique Identifier"
        isParent:
          type: boolean
          description: "Indicates if the Report is a parent report"
        name:
          type : string
          description: "Name of the Report"
        xml:
          type : string
        accountId:
          type: integer
          format: int64
        created:
          $ref: '#/components/schemas/Audit'
        changed:
          $ref: '#/components/schemas/Audit'
        compiledReport:
          type : string
          format: binary
        parameters:
          type: array
          description: "Contains the available parameters to be used for generating the Report."
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              defaultValue:
                type: string
              useAsPrompt:
                type: boolean
    Audit:
      type: object
      properties:
        userId:
          type: string
        dateTime:
          type: string
          format: date-time
    Product:
      type: object
      properties:
        id:
          type: integer
          description: Unique Identifier
          format: int64
        name:
          type: string
          description: The name of the Product as it appears in the UI
        moduleId:
          type: string
          description: The name of the Product as it appears in the UI
        version:
          type: integer
          description: Version number of the Product.
          format: int32
    UserRole:
      required:
        - name
        - permissions
      type: object
      description: The User Roles API offer a set of customizable and predefined roles that can be assigned to Users/Drivers. A User Role contains Permissions that indicates the actions the User is allowed to do. The User’s accessible services are dependent on the User Role and checked against the Permissions that are assigned under them in the system.
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        id:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        lastChangedDate:
          type: string
          description: "Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)"
          format: date-time
        name:
          type: string
          description: |
            The name of the User Role.

            Available roles are:

            * USER_ROLE_ACCOUNTADMIN
              Indicates if a User is an Account Admin. An Account Admin has overall access to the Account.
              * Can manage Accounts that are under his/her own Account.
              * Can manage Driver Statuses, Driver Logs, Locations, Violations, Unidentified Driving Events, Reports, DVIR History, Malfunctions & Data Diagnostics, Log Edits, IFTA and Mobile Worker pages.
              * An Account Admin has access to the following administrative pages: Accounts, Account Settings, Carrier Information, Alerts, Branding, User Profile, Users, User Roles, Drivers,
                Driver Exceptions, Equipment Management, Terminals, DVIR Forms, Form Setups, Button Editor, License Management (for Accounts with license functionality) and User Interface
            * USER_ROLE_FLEETMANAGER
              Indicates if a User is a Fleet Manager. A Fleet Manager has access to Users, Equipment, Terminals and DVIR Forms information.
              * Can manage Driver Statuses, Driver Logs, Locations, Violations, Unidentified Driving Events, Reports, DVIR History, Malfunctions & Data Diagnostics, Log Edits, IFTA and Mobile Worker pages.
              * A Fleet Manager has access to the following administrative pages: Carrier Information, Alerts, User Profile, Users, Drivers, Equipment Management, Terminals, DVIR Forms, User Interface
            * USER_ROLE_USERADMIN
              Indicates if a User is a User Admin. A User Admin has access to Users’ information.
              * Can manage Driver Statuses, Driver Logs, Locations, Violations, Unidentified Driving Events, Reports, DVIR History, Job Sites and Work Orders.
              * A User Admin has access to the following administrative pages: Carrier Information, Alerts, User Profile, Users, Drivers, Equipment Management, User Interface
            * USER_ROLE_ASSETADMIN
              Indicates if a User is an Asset Admin. An Asset Admin can manage the Account’s Equipment.
              * An Asset Admin has access to the following administrative pages: User Profile, Equipment Management, User Interface
            * USER_ROLE_WORKORDERASSIGNEE
              Indicates if a User is work order assignee. A Work Order Assignee can be assigned Work Orders from the portal. Actions that can be performed by a Work Order Assignee include:
              * Cannot login to portal.
              * Can login, view, create, update and delete only his/her own records in the mobile app.
            * USER_VIEW_ONLY
              Indicates if a User has VIEW ONLY Permissions. A User with all the view Permissions can perform the following:
              * Can view Driver Statuses, Driver Logs, Locations, Violations, Unidentified Driving Events, Reports, DVIR History, Malfunctions & Data Diagnostics, Log Edits, Job Sites and Work Orders
              * Can view the following administrative pages: User Profile and User Interface
        permissions:
          type: array
          description: A collection of Permissions that the User Role has.
          items:
            $ref: '#/components/schemas/Permission'
        system:
          type: boolean
          description: Indicates if a User Role is system or not.
    DriverCalc:
      required:
        - driverHistoryId
        - userId
        - violations
      type : object
      description : The information within Driver Calcs includes the Driver, the associated Driver History record from which the calculation is based upon, and the timestamps pertaining to the Driver’s on duty shift.
      properties:
        accountId :
          type: integer
          description:  The id of the Account that owns this record.
          format: int64
        breakResetTimestamp :
          type: string
          description: "Timestamp value of the Driver’s break reset Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)"
          format: date-time
        cycleResetTimestamp :
          type: string
          description: "Timestamp value of the Driver’s cycle reset Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)"
          format: date-time
        driverAlias:
          type: string
          description: The id of the Driver(alias) that is tied to this status.
        driverHistoryId :
          type: integer
          description: The id of the Driver History associated with the Driver Calc
          format: int64
        id :
          type: integer
          description: Unique identifier
          format: int64
        lastChangedDate:
          type: string
          description: "Auto-generated timestamp of the last change made to this record Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)"
          format: date-time
        shiftResetTimestamp :
          type: string
          description: "Timestamp value of the Driver’s shift reset Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)"
          format: date-time
        userId :
          type: integer
          description: The id of the Driver associated with the Driver Calc Record.
          format: int64
        violations :
          type: object
          properties:
            DriverViolations:
              type: array
              items:
                $ref: '#/components/schemas/DriverViolationForCalc'
          description: Driver Violations are recorded instances wherein the Driver has committed Driving, Shift, or Cycle Violations. Whenever a Driver
            has exceeded the maximum time allowed for an OnDuty or a Driving status within a given time period or a series of time periods,
            these Driver Violations are recorded.
    Terminal:
      required:
      - name
      - startTimeOfDay
      - timeZone
      type: object
      properties:
        accountId:
          type: integer
          description: 'The id of the Account that owns this record.'
          format: int64
        city:
          type: string
          description: 'The city where the Terminal is located'
        country:
          $ref: '#/components/schemas/Country'
        deletedAt:
          type: string
          description: 'Indicates the date and time when the Terminal was soft-deleted.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z).
            This is not returned for Terminals that have not been soft-deleted.'
          format: date-time
        id:
          type: integer
          description: 'Unique Identifier'
          format: int64
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)'
          format: date-time
        latitude:
          type: number
          description: 'Indicates the latitude coordinate of the location where the Terminal is located'
          format: double
        longitude:
          type: number
          description: 'Indicates the latitude coordinate of the location where the Terminal is located'
          format: double
        mainOffice:
          type: boolean
          description: 'Indicates if the Terminal is the main office or not. Only one Terminal can be main
            office at a time. Setting this to true for one Terminal will set all other Terminals to false'
        name:
          type: string
          description: 'The name of the Terminal'
        phoneNumber:
          type: string
          description: 'The phone number of the Terminal'
        postalCode:
          type: string
          description: 'The postal code where the Terminal is located'
        startTimeOfDay:
          type: string
          description: 'The start time of day set for the terminal.
            Note: Format can be in (HH:MM:SS) or (HH:MM:SS.sss)'
          format: time
        state:
          type: string
          description: |
            The state where the Terminal is located. Can either be one of the following state codes:

              * USA: AL, AK, AR, AZ, CA, CO, CT, DC, DE, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY
              * USA Protectorates: AS, DC, GU, MP, PR, VI
              * Canada: AB, BC, MB, NB, NF, NS, NT, ON, PE, QC, SK, YT
              * Mexico: MEX_AG, MEX_BN, MEX_BS, MEX_CH, MEX_CI, MEX_CL, MEX_CP, MEX_CS, MEX_DF, MEX_DG, MEX_GE, MEX_GJ, MEX_HD, MEX_JA, MEX_MC, MEX_MR, MEX_MX, MEX_NA, MEX_NL, MEX_OA, MEX_PU, MEX_QE, MEX_QI, MEX_SI, MEX_SL, MEX_SO, MEX_TA, MEX_TB, MEX_TL, MEX_VC, MEX_YU, MEX_ZA
        street:
          type: string
          description: 'The street where the Terminal is located'
        streetAddress2:
          type: string
          description: 'Additional address information'
        terminalCode:
          type: string
          description: 'The optional in-account code used to identify the Terminal'
        timeZone:
          type: string
          description: 'Time zone where the Terminal is located. Can either be:
            * America/Anchorage
            * America/Phoenix
            * Canada/Atlantic
            * Canada/Newfoundland
            * CST6CDT
            * EST5EDT
            * Pacific/Honolulu
            * MST7MDT
            * America/Indiana/Knox
            * PST8PDT
            * America/Regina'
        uuid:
          type: string
          format: uuid
          description: Unique identifier
        ymRadiusThresholdKm:
          type: number
          description: 'The amount in km within the terminal’s location to be
            assigned as yard moves when the driver is within that range.'
          format: double
    NearestTerminal:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        distance:
          type: number
          format: double
        terminalCode:
          type: string
        uuid:
          type: string
          format: uuid
          description: Unique identifier
    NearestTerminalCorrelationRequest:
      type: object
      properties:
        correlationId:
          type: integer
          format: int32
        lat:
          type: number
          format: double
        long:
          type: number
          format: double
    NearestTerminalCorrelation:
      type: array
      items:
        type: object
        properties:
          correlationId:
            type: integer
            format: int32
          terminals:
            type: array
            items:
              $ref: "#/components/schemas/NearestTerminal"
    Subset:
      type: object
      required:
        - name
        - terminalId
      properties:
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        id:
          type: integer
          description: Unique Identifier.
          format: int64
        isDefault:
          type: boolean
          description: Indicates if the Subset is the default subset of the terminal it belongs to or not. Only one Subset can be the default for each terminal at a time. Setting this to true for one Subset will set all other Subsets under the same terminal to false.
        name:
          type: string
          description: The name of the Subset.
        terminalId:
          type: integer
          description: The id of the Terminal under which this subset belongs to.
          format: int64
    mediaIdArrayParam:
      type: object
      properties:
        mediaIds:
          type: array
          items:
            type: integer
            format: int-64
    CcmtaMultiRequest:
      type: object
      properties:
        assetIds:
          type: array
          items:
            type: integer
            format: int64
        comment:
          type: string
        driverIds:
          type: array
          items:
            type: integer
            format: int64
        fromDateTime:
          type: string
          format: date-time
        toDateTime:
          type: string
          format: date-time
        recipient:
          type: string
    SmtpConfiguration:
      type: object
      properties:
        url:
          type: string
          description: "The URL to be used by the configuration."
        port:
          type: integer
          format: int64
          description: "The port number to be used by the configuration."
        tls:
          type: boolean
          description: "Indicates if TLS should be used or not"
        username:
          type: string
          description: "The username to be used by the configuration"
        password:
          type: string
          format: password
          description: "The password to be used by the configuration. If empty on POST or PUT, the old password will be retained."
        accountId:
          type: integer
          format: int64
          description: "The id of the Account that owns this record."
        id:
          type: integer
          format: int64
          description: "Unique Identifier"
        lastChangedDate:
          type: string
          format: date-time
          description: "Auto-generated timestamp of the last change made to this record. Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z)"
    VBusData:
      type: object
      properties:
        assetId : 
          type:  integer 
          format:  int64 
          description: "ID of Asset that reported this data."
        timestamp : 
          type:  string  
          format:  date-time 
          description: "Date and time the data was collected Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g: 1970-01-01T00:00:00.000Z) ."
        batteryVoltage  : 
          type:  number  
          format:  double  
          description: "Battery Voltage."
        engineOilPressure : 
          type:  number  
          format:  double  
          description: "Engine Oil Pressure."
        engineSpeedRpm  : 
          type:  number  
          format:  double  
          description: "Engine Speed (RPM) ."
        engineCoolantTemperature  : 
          type:  number  
          format:  double  
          description: "Engine Coolant Temperature ."
        fuelEconomy : 
          type:  number  
          format:  double  
          description: "Fuel Economy ."
        fuelRate  : 
          type:  number  
          format:  double  
          description: "Fuel Rate."
        gpsSource : 
          $ref: '#/components/schemas/GpsSource'           
        hdop  : 
          type:  number  
          format:  double  
          description: "Horizontal dilution of precision ."
        highResOdometerKm : 
          type:  number  
          format:  double  
          description: "Odometer (high-resolution) ."
        ignition  : 
          type:  integer 
          format:  int32 
          description: "Ignition State."
        odometerKm  : 
          type:  number  
          format:  double  
          description: "Odometer."
        ptoStatus : 
          type:  integer 
          format:  int32 
          description: "PTO Status Indicator."
        seatBelt  : 
          type:  integer 
          format:  int32 
          description: "Seatbelt Status ." 
        parkingBrake  : 
          type:  integer 
          format:  int32 
          description: "Parking Brake Status."
        throttle  : 
          type:  number  
          format:  double  
          description: "Throttle Position ."
        engineTotalHours  : 
          type:  number  
          format:  double  
          description: "Total Engine Hours."
        totalFuelUsed : 
          type:  number  
          format:  double  
          description: "Total Fuel Used ."
        transCurrentGear  : 
          type:  integer 
          format:  int32 
          description: "Current Transmission Gear ."
        fuelLevel : 
          type:  integer 
          format:  int32 
          description: "Fuel level remaining of Vehicle ."
        idleFuelConsumed : 
          type:  number  
          format:  double  
          description: "Fuel consumed by vehicle while on idle."
        tripOdometerKm  : 
          type:  number  
          format:  double  
          description: "Trip Odometer ."
        vehicleSpeedKph : 
          type:  number  
          format:  double  
          description: "Vehicle Ground Speed."
        vin : 
          type:  string      
          description: "Vehicle Identification Number ."
        driverHistoryId : 
          type:  integer 
          format:  int64 
          description: "ID of Driver History associated with this data."
        latitude  : 
          type:  number  
          format:  double  
          description: "Latitude of the vehicle when the data was collected."
        longitude : 
          type:  number  
          format:  double  
          description: "Longitude of the vehicle when the data was collected."
        numSatellites : 
          type:  integer 
          format:  int32 
          description: "Number of Satellites."
        state : 
           type:  string
           description: |
            The state where the Carrier is located. Can either be one of the following state codes:
              * USA: AL, AK, AR, AZ, CA, CO, CT, DC, DE, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY, AS, DC, GU, MP, PR, VI
              * Canada: AB, BC, MB, NB, NF, NS, NT, ON, PE, QC, SK, YT
              * Mexico: MEX_AG, MEX_BN, MEX_BS, MEX_CH, MEX_CI, MEX_CL, MEX_CP, MEX_CS, MEX_DF, MEX_DG, MEX_GE, MEX_GJ, MEX_HD, MEX_JA, MEX_MC, MEX_MR, MEX_MX, MEX_NA, MEX_NL, MEX_OA, MEX_PU, MEX_QE, MEX_QI, MEX_SI, MEX_SL, MEX_SO, MEX_TA, MEX_TB, MEX_TL, MEX_VC, MEX_YU, MEX_ZA            
        userId  : 
          type:  integer 
          format:  int64 
          description: "ID of User associated with this data."
        accountId : 
          type:  integer 
          format:  int64 
          description: "The id of the Account that owns this record."
        id  : 
          type:  integer 
          format:  int64 
          description: "Unique Identifier ."
        created : 
          $ref: '#/components/schemas/Audit'           
        changed : 
          $ref: '#/components/schemas/Audit'  
    MyProduct:
      type: object
      properties:
        id:
          type: integer
          description: Unique Identifier.
          format: int64
        name:
          type: string
          description: The name of the Product available to the current Account.
    VisibilitySet:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Visibility Set
        isDefault:
          type: boolean
          description: Indicates if it is the designated Default Set
        accountId:
          type: integer
          description: The id of the Account that owns this record.
          format: int64
        id:
          type: integer
          description: Unique Identifier
          format: int64
        lastChangedDate:
          type: string
          description: 'Auto-generated timestamp of the last change made to this record.
            Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
            1970-01-01T00:00:00.000Z)'
          format: date-time
    DriversHaveDriven:
      type: object
      properties:
        eventTime:
          type: string
          description: "Most recent event time associated with the driver and the asset id
             Note: Format is in timestamp and timezone (YYYY-MM-DDTHH:MM:SS.sssZ, e.g:
             1970-01-01T00:00:00.000Z)."
          format: date-time
        firstName:
          type: string
          description: "First name of the driver."
        lastName:
          type: string
          description: "Last name of the driver."
        userId:
          type: integer
          format: int64
          description: "ID of Driver associated with this data."
    LogExceptionType:
      type: string
      enum:
        - UNAPPROVED
        - APPROVED
        - LOAD_CHANGED
        - CODRIVER_CHANGED
        - NOTES_CHANGED
        - US_CYCLE_RESET_REJECTED
        - US_CYCLE_RESET_REMOVED
        - US_CYCLE_RESET_ADDED
        - DRIVER_ACTIVE
        
  parameters:
    accountUuidHeader:
      in: header
      name: HOS-Account-UUID
      schema:
        type: string
        format: uuid
      description: Account uuid is required for oauth2 client credential grant
    emailAddressParam:
      name: email-address
      in: query
      description: Specifies the email address to which the certified log PDF(s) will be sent to
      schema:
        type: string
        format: email
    appNameParam:
      name: app-name
      in: query
      description: Specifies the name of the app sending the PDF(s) which will be used on the email subject
      schema:
        type: string
    offsetParam:
      name: offset
      in: query
      description: Retrieves matching records after an offset value (e.g. offset=2,
        zero offset by default)
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: Retrieves a number of records per page specified by the value (e.g.
        limit=10, all records by default)
      schema:
        type: integer
        format: int32
    recordIdsParam:
      name: recordIds
      in: path
      description: A space (+) separated list of specific record ids to
        get. Althought marked as required, this is optional.
      required: true
      schema:
        type: string
    recordIdParam:
      name: recordIds
      in: path
      description: The single record id
      required: true
      schema:
        type: integer
        format: int64
    nameParam:
      name: name
      in: query
      description: Retrieves matching records with the specified name (all names by
        default).
      schema:
        type: string
    userIdArrayParam:
      name: user-id
      in: query
      description: A comma separated list of user ids. Retrieves matching records
        for a specific User or Users (e.g. user-id=496650, user-id=123,456 current
        User by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          format: int64
    userIdParam:
      name: user-id
      in: query
      description: Retrieves matching records for a specific User (e.g. user-id=1268897,
        all Drivers by default)
      schema:
        type: integer
        format: int64
    assetIdArrayParam:
      name: asset-id
      in: query
      description: A comma separated list of asset ids. Retrieves matching records
        for a specific asset or assets (e.g. asset-id=1321545, asset-id=123,456 current
        asset by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          format: int64
    assetIdParam:
      name: asset-id
      in: query
      description: Retrieves matching records for a specific Asset (e.g. asset-id=1362590,
        all Assets by default)
      schema:
        type: integer
        format: int64
    assetTypeArrayParam:
      name: asset-type
      in: query
      description: Retrieves matching records that belong to a specific asset type
        (e.g. asset-type=Vehicle, all types by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/AssetType"
    assetTypeParam:
      name: asset-type
      in: query
      description: Retrieves matching records that belong to a specific asset type
        (e.g. asset-type=Vehicle, all types by default)
      schema:
          $ref: "#/components/schemas/AssetType"
    visibilitySetIdArrayParam:
      name: visibility-set-id
      in: query
      description: Retrieves the matching Assets that belong to the specified Visibility Set
        (e.g. visibility-set-id=2007, all visibility sets by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          format: int64
    vinParam:
      name: vin
      in: query
      description: Retrieves the matching Asset with the specified VIN
        (e.g. vin=VIN-00000000000002, all VINs by default)
      schema:
        type: string
    licensePlateParam:
      name: license-plate
      in: query
      description: Retrieves the matching Asset with the specified license plate
        (e.g. license-plate=LIC-002, all plates by default)
      schema:
        type: string
    terminalIdArrayParam:
      name: terminal-id
      in: query
      description: A comma separated list of terminal ids. Retrieves matching records
        of Drivers assigned to the specified Terminal or Terminals (e.g. terminal-id=255,
        terminal-id=123,456 all Terminals by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          format: int64
    terminalIdParam:
      name: terminal-id
      in: query
      description: A terminal id (e.g. terminal-id=255)
      schema:
        type: integer
        format: int64
    activeParam:
      name: active
      in: query
      description: |
        Retrieves matching records depending on the boolean value specified. (e.g. active=true)
          * If true, only statuses of active records are retrieved.
          * If false, only statuses of inactive records are retrieved.
          * If parameter is not included or null, all records (subject to other criteria) are retrieved.
      schema:
        type: boolean
    systemParam:
      name: system
      in: query
      description: |
        Retrieves matching records depending on the boolean value specified. (e.g. system=true, false by default)
          * If true, records marked system are retrieved.
          * If false, records not marked as system are retrieved.
          * Wild-carding using system=* or system=true,false will retrieve records subject to other criteria
      schema:
        type: boolean
    clearedParam:
      name: cleared
      in: query
      description: Retrieves matching records if their status have been cleared or not, depending on the boolean value specified.
        (e.g. cleared=false, all statuses by default)
      schema:
        type: boolean
    descriptionParam:
      name: description
      in: query
      description: Retrieves all the data with the match description in this parameter.
      schema:
        type: string
    fromEventTimeParam:
      name: from-event-time
      in: query
      description: Retrieves matching records that occurred on or after the specified
        date (e.g. from-event-time=2016-07-05T03:03:10.147Z, all dates by default)
      schema:
        type: string
        format: date-time
    toEventTimeParam:
      name: to-event-time
      in: query
      description: Retrieves matching records that occurred on or before the specified
        date (e.g. to-event-time=2016-07-05T03:03:10.147Z, all dates by default)
      schema:
        type: string
        format: date-time
    fromChangeTimestampParam:
      name: from-change-timestamp
      in: query
      description: Retrieves records modified since the timestamp supplied (e.g. from-change-timestamp=2018-06-11T12:00:00.000Z,
        all timestamps by default)
      schema:
        type: string
        format: date-time
    toChangeTimestampParam:
      name: to-change-timestamp
      in: query
      description: Retrieves records modified before the timestamp supplied (e.g.
        to-change-timestamp=2018-06-11T12:00:00.000Z, REQUIRES from-change-timestamp)
      schema:
        type: string
        format: date-time
    subsetIdArrayParam:
      name: subset-id
      in: query
      description: A comma separated list of subset ids. Retrieves matching records
        whose subsetId of the record matches the specified parameter(s) (e.g. subset-id=940,
        subset-id=123,456 returns records from all subsets by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          format: int64
    eventTypeArrayParam:
      name: event-type
      in: query
      description: A comma separated list of event types.  Retrieves matching records
        that have the specified Event Type (e.g. event-type=OnDuty, all Event Types
        by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    recordStatusArrayParam:
      name: record-status
      in: query
      description: A comma separated list of record statuses.  Retrieves matching
        records that have the specified Record Status (e.g. record-status=Active,
        all Record Statuses by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    recordOriginArrayParam:
      name: record-origin
      in: query
      description: A comma separated list of record origins.  Retrieves matching records
        that have the specified Record Origin (e.g. record-origin=Driver, all record
        origins by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    fromCanAdditionalHoursWorkShiftStartParam:
      name: can-adl-hours-work-shift-start
      in: query
      description: Start time date range for filter for canadian additional hours
        work shift start time.
      schema:
        type: string
        format: date-time
    toCanAdditionalHoursWorkShiftStartParam:
      name: to-adl-hours-work-shift-start
      in: query
      description: End time date range for filter for canadian additional hours work
        shift start time.
      schema:
        type: string
        format: date-time
    fromDeletedAtParam:
      name: from-deleted-at
      in: query
      description: Retrieves matching records that were deleted after the specified
        timestamp. Setting to * will return all records. (e.g. from-deleted-at=2016-07-26T03:59:08.114Z,
        null by default – returns only non-deleted records)
      schema:
        type: string
        format: date-time
    toDeletedAtParam:
      name: to-deleted-at
      in: query
      description: Retrieves matching records that were deleted on or in between
          the specified timestamps. (e.g. from-deleted-at=2017-05-19T06:51:45.438Z&to-deleted-at=2017-05-19.
      schema:
        type: string
        format: date-time
    deletedAtParam:
      name: deleted-at
      in: query
      description: "Retrieves matching records that were soft-deleted if set to true.
          Setting to * will return all records. (e.g. deleted-at=true, false by default
          – returns only non-deleted records)"
      schema:
        type: string
    noteArrayParam:
      name: note
      in: query
      description: A comma separated list of notes.  Retrieves matching records that
        have the specified note (e.g. note=Authenticate, all notes by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    uuidParam:
      name: uuid
      in: query
      description: Retrieves matching records with the specified UUID (e.g. uuid=96e2d49f-abe4-4a65-a808-5d57917f93d9,
        all UUIDs by default)
      schema:
        type: string
    uuidPathParam:
      name: uuid
      in: path
      description: Retrieves matching records with the specified UUID
      required: true
      schema:
        type: string
    driverAliasArrayParam:
      name: driver-alias
      in: query
      description: Retrieves matching records with the specified Driver Id (alias of the driver)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    userUuidParam:
      name: user-uuid
      in: query
      description: Retrieves matching records with the specified user's UUID (e.g. user-uuid=96e2d49f-abe4-4a65-a808-5d57917f93d9)
      schema:
        type: string
        format: uuid
    driverEditParam:
      name: driver-edit
      in: query
      description: Retrieves matching records that have been edited or not, depending
        on the boolean value specified. (e.g driver-edit=true will return events that
        are manually edited)
      schema:
        type: boolean
    driverSystemParam:
      name: driver.system
      in: query
      description: |
        Retrieves matching records based on Driver type, depending on the boolean value specified. (e.g. driver.system=true, false by default)
          * If true, only events from unidentifiedDriver are retrieved.
          * If false, only events from actual drivers are retrieved.
          * Wild-carding using driver.system=* or driver.system=true,false will retrieve events from all Drivers
      schema:
        type: string
    homeTerminalIdParam:
      name: home-terminal-id
      in: query
      description: Retrieves matching records whose Vehicle’s homeTerminalId matches
        the specified parameter (e.g. home-terminal-id=634, all terminals by default)
      schema:
        type: integer
        format: int64
    homeTerminalIdArrayParam:
      name: home-terminal-id
      in: query
      description: Retrieves matching records whose Vehicle’s homeTerminalId matches
        the specified parameter (e.g. home-terminal-id=634, all terminals by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          format: int64
    authorizedTerminalIdArrayParam:
      name: authorized-terminal-id
      in: query
      description: Retrieves matching records whose Vehicle’s homeTerminalId matches
        the specified parameter (e.g. authorized-terminal-id=634, all terminals by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          format: int64
    isClassifiedParam:
      name: is-classified
      in: query
      description: 'If is classified is true: should get unidentified driving events
        which ‘Note’ is NOT equal to ‘Automatic Transition’ and NOT ‘Null’ and NOT
        empty.'
      schema:
        type: boolean
    dateParam:
      name: date
      in: query
      description: Retrieves records with a date matching the date given (e.g. date=2018-06-11)
      schema:
        type: string
        format: date
    logDateParam:
      name: log-date
      in: query
      description: Retrieves records with a log date matching the date given (e.g.
        log-date=2018-06-11)
      schema:
        type: string
        format: date
    fromLogDateParam:
      name: from-log-date
      in: query
      description: Retrieves records with a date on or after the date given (e.g.
        from-log-date=2018-06-11)
      schema:
        type: string
        format: date
    toLogDateParam:
      name: to-log-date
      in: query
      description: Retrieves records with a date on or before the date given (e.g.
        to-log-date=2018-06-11)
      schema:
        type: string
        format: date
    dailyDriverIdArrayParam:
      name: driver-daily-id
      in: query
      description: A comma separated list of daily driver ids. Retrieves matching
        records for a Driver Daily (e.g. driver-daily-id=247446, all Driver Dailies
        by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          format: int64
    fromDateTimeParam:
      name: from-date-time
      in: query
      description: Retrieves matching records whose dateTime field is on or between
        the from-date-time and to-date-time parameters, respectively (e.g. from-date-time=2017-05-04T07:00:00.000Z&to-date-time=2017-05-06T07:00:00.000Z,
        all dateTime by default)
      schema:
        type: string
        format: date-time
    toDateTimeParam:
      name: to-date-time
      in: query
      description: Retrieves matching records whose dateTime field is on or between
        the from-date-time and to-date-time parameters, respectively (e.g. from-date-time=2017-05-04T07:00:00.000Z&to-date-time=2017-05-06T07:00:00.000Z,
        all dateTime by default)
      schema:
        type: string
        format: date-time
    fromTimestampParam:
      name: from-timestamp
      in: query
      description: Retrieves records with beginTimestamp field that is after the specified time
        (e.g. from-timestamp=2018-06-11T11:30:00.000Z, all timestamps by default)
      schema:
        type: string
        format: date-time
    toTimestampParam:
      name: to-timestamp
      in: query
      description: Retrieves records with beginTimestamp field that is before the specified time
        (e.g. to-timestamp=2018-06-11T11:30:00.000Z, all timestamps by default)
      schema:
        type: string
        format: date-time
    documentTypeParam:
      name: document-type
      in: query
      description: Retrieves matching records for a specific Document Type (e.g. document-type=Fuel
        Receipt, all Document Types by default)
      schema:
        type: string
    fuelTypeParam:
      name: fuel-type
      in: query
      description: Retrieves matching records for a specific Fuel Type (e.g. fuel-type=Gasoline,
        all fuel types by default)
      schema:
        type: string
    eldIdentifierParam:
      name: eld-identifier
      in: query
      description: The ELD Identifier of the Account
      schema:
        type: string
    eldRegistrationIdParam:
      name: eld-registration-id
      in: query
      description: The ELD Registration ID of the device used by the Driver
      schema:
        type: string
    emailMessageParam:
      name: email-message
      in: query
      schema:
        type: string
    driverHistoryIdParam:
      name: driver-history-id
      in: query
      description: Retrieves matching records for a specific Driver History (e.g. driver-history-id=4826036, all Driver Histories by default)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: integer
          format: int64
    violationNameParam:
      name: violation-name
      in: query
      description: Retrieves matching records with the specified Driver Violation name (e.g. violation-name=BREAK_DRIVE_HOURS, all Driver Violations by default)
      schema:
        type: string
    currentPwdTokenParam:
      name: current-password
      in: query
      description: Contains the current base64 encoded password
      schema:
        type: string
    newPwdTokenParam:
      name: new-password
      in: query
      description: Contains the new  base64 encoded password to be assigned
      schema:
        type: string
    driverHistoryFromEventTimeParam:
      name: driver-history.from-event-time
      in: query
      description: Retrieves records whose Driver History ‘s eventTime occurred on or after the specified date. This is must be used together with driver-history.to-event-time. (e.g. driver-history.from-event-time=2018-06-11T12:00:00.000Z)
      schema:
        type: string
        format: date-time
    driverHistoryToEventTimeParam:
      name: driver-history.to-event-time
      in: query
      description: Retrieves records whose Driver History’s eventTime occurred on or before the specified date. This is must be used together with driver-history.from-event-time. (e.g. driver-history.to-event-time=2018-06-11T12:00:00.000Z)
      schema:
        type: string
        format: date-time
    terminalCodeParam:
      name: terminal-code
      in: query
      description: 'Retrieves matching records with the specific terminalCode
        (e.g. terminal-code=HT-001, all Terminal codes by default)'
      schema:
        type: string
    latitudeParam:
      name: lat
      in: query
      schema:
        type: number
        format: double
    longitudeParam:
      name: long
      in: query
      schema:
        type: number
        format: double
    isDefaultParam:
      name: is-default
      in: query
      description:  Retrieves all default subsets or not (e.g. is-default=true, all Subsets by default).
      schema:
        type: boolean
    recipientParam:
      name: recipient
      in: query
      schema:
        type: string
    subjectParam:
      name: subject
      in: query
      schema:
        type: string
    accountNameParam:
      name: account-name
      in: query
      description: Filters accounts or sub-accounts that match the provided account name
      schema:
        type: string
    carrierNameParam:
      name: carrierName
      in: query
      schema:
        type: string
    idParam:
      name: id
      in: query
      schema:
        type: integer
        format: int64
    keyArrayParam:
      name: key
      in: query
      description: A comma separated list of keys. Retrieves matching records
        for a specific key (e.g. key=HOS_HOME_TERMINAL_STREET, key=HOS_HOME_TERMINAL_STREET,HOS_HOME_TERMINAL_CITY)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    nameArrayParam:
      name: name
      in: query
      description: A comma separated list of names. Retrieves matching records
        for a specific name (e.g. name=geocode.service, name=geocode.service,os.carrier)
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    parentUuidParam:
      name: parent-uuid
      in: query
      description: Retrieves matching records with the specified UUID (e.g. uuid=96e2d49f-abe4-4a65-a808-5d57917f93d9,
        all UUIDs by default)
      schema:
        type: string
        format: uuid
    businessAccountUuidParam:
      name: business-account-uuid
      in: query
      description: Retrieves matching records with the specified UUID (e.g. uuid=96e2d49f-abe4-4a65-a808-5d57917f93d9,
        all UUIDs by default)
      schema:
        type: string
        format: uuid
    operationalUnitUuidParam:
      name: operational-unit-uuid
      in: query
      description: Retrieves matching records with the specified UUID (e.g. uuid=96e2d49f-abe4-4a65-a808-5d57917f93d9,
        all UUIDs by default)
      schema:
        type: string
        format: uuid
    driverUuidParam:
      name: driver-uuid
      in: query
      description: Retrieves matching records with the specified UUID (e.g. uuid=96e2d49f-abe4-4a65-a808-5d57917f93d9,
        all UUIDs by default)
      schema:
        type: string
        format: uuid

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://virtserver.swaggerhub.com/hos30/Vistracks/1.0.0/oauth/token'
          refreshUrl: 'https://virtserver.swaggerhub.com/hos30/Vistracks/1.0.0/oauth/refresh'